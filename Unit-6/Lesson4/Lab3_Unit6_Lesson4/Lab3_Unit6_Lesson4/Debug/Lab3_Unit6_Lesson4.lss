
Lab3_Unit6_Lesson4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000726  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b6  00000000  00000000  000009ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000347  00000000  00000000  00000fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  000012e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037c  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  0000174c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001926  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_1>
   8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_2>
   c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <INT_Enable>:
#define SREG			*(volatile uint8_t *) (0x5F)

void INT_Enable(void)
{

	SREG |= (1<<7);
  6c:	8f b7       	in	r24, 0x3f	; 63
  6e:	80 68       	ori	r24, 0x80	; 128
  70:	8f bf       	out	0x3f, r24	; 63
  72:	08 95       	ret

00000074 <EXT0_INIT>:

} 
void EXT0_INIT(void)
{
	//INTERRUPT 0 ANY LOGICAL CHANGE
	MCUCR |= (1<<0);
  74:	85 b7       	in	r24, 0x35	; 53
  76:	81 60       	ori	r24, 0x01	; 1
  78:	85 bf       	out	0x35, r24	; 53
		
	//Enable Interrupt 0
	GICR |=(1<<6);
  7a:	8b b7       	in	r24, 0x3b	; 59
  7c:	80 64       	ori	r24, 0x40	; 64
  7e:	8b bf       	out	0x3b, r24	; 59
  80:	08 95       	ret

00000082 <EXT1_INIT>:
}

void EXT1_INIT(void)
{
	//INTERRUPT 1 ANY RISING EDGE
	MCUCR |= (1<<2);
  82:	85 b7       	in	r24, 0x35	; 53
  84:	84 60       	ori	r24, 0x04	; 4
  86:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<3);
  88:	85 b7       	in	r24, 0x35	; 53
  8a:	88 60       	ori	r24, 0x08	; 8
  8c:	85 bf       	out	0x35, r24	; 53
	
	//Enable Interrupt 1
	GICR |=(1<<7);
  8e:	8b b7       	in	r24, 0x3b	; 59
  90:	80 68       	ori	r24, 0x80	; 128
  92:	8b bf       	out	0x3b, r24	; 59
  94:	08 95       	ret

00000096 <EXT2_INIT>:
}

void EXT2_INIT(void)
{
	//INTERRUPT 2 FALLING EDGE
	MCUCSR &= ~(1<<6);
  96:	84 b7       	in	r24, 0x34	; 52
  98:	8f 7b       	andi	r24, 0xBF	; 191
  9a:	84 bf       	out	0x34, r24	; 52
	
	//Enable Interrupt 2
	GICR |=(1<<5);
  9c:	8b b7       	in	r24, 0x3b	; 59
  9e:	80 62       	ori	r24, 0x20	; 32
  a0:	8b bf       	out	0x3b, r24	; 59
  a2:	08 95       	ret

000000a4 <main>:
}
int main(void)
{
	//INTERRUPT PINS INPUT
	DDRD  &= ~(1<<2);
  a4:	81 b3       	in	r24, 0x11	; 17
  a6:	8b 7f       	andi	r24, 0xFB	; 251
  a8:	81 bb       	out	0x11, r24	; 17
	DDRD  &= ~(1<<3);
  aa:	81 b3       	in	r24, 0x11	; 17
  ac:	87 7f       	andi	r24, 0xF7	; 247
  ae:	81 bb       	out	0x11, r24	; 17
	DDRB  &= ~(1<<2);
  b0:	87 b3       	in	r24, 0x17	; 23
  b2:	8b 7f       	andi	r24, 0xFB	; 251
  b4:	87 bb       	out	0x17, r24	; 23
	
	//LED PINS OUTPUT 
	DDRD  |= (1<<5);
  b6:	81 b3       	in	r24, 0x11	; 17
  b8:	80 62       	ori	r24, 0x20	; 32
  ba:	81 bb       	out	0x11, r24	; 17
	DDRD  |= (1<<6);
  bc:	81 b3       	in	r24, 0x11	; 17
  be:	80 64       	ori	r24, 0x40	; 64
  c0:	81 bb       	out	0x11, r24	; 17
	DDRD  |= (1<<7);
  c2:	81 b3       	in	r24, 0x11	; 17
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	81 bb       	out	0x11, r24	; 17
	
	
	INT_Enable();
  c8:	0e 94 36 00 	call	0x6c	; 0x6c <INT_Enable>
	EXT0_INIT();
  cc:	0e 94 3a 00 	call	0x74	; 0x74 <EXT0_INIT>
	EXT1_INIT();
  d0:	0e 94 41 00 	call	0x82	; 0x82 <EXT1_INIT>
	EXT2_INIT();
  d4:	0e 94 4b 00 	call	0x96	; 0x96 <EXT2_INIT>
	
    /* Replace with your application code */
    while (1) 
    {
		//LEDS ARE OFF 
		PORTD &= ~(1<<5);
  d8:	82 b3       	in	r24, 0x12	; 18
  da:	8f 7d       	andi	r24, 0xDF	; 223
  dc:	82 bb       	out	0x12, r24	; 18
		PORTD &= ~(1<<6);
  de:	82 b3       	in	r24, 0x12	; 18
  e0:	8f 7b       	andi	r24, 0xBF	; 191
  e2:	82 bb       	out	0x12, r24	; 18
		PORTD &= ~(1<<7);
  e4:	82 b3       	in	r24, 0x12	; 18
  e6:	8f 77       	andi	r24, 0x7F	; 127
  e8:	82 bb       	out	0x12, r24	; 18
  ea:	f6 cf       	rjmp	.-20     	; 0xd8 <main+0x34>

000000ec <__vector_1>:
    }
}

ISR(INT0_vect)
{
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	2f 93       	push	r18
  f8:	8f 93       	push	r24
  fa:	9f 93       	push	r25
	//LED ON
	PORTD |= (1<<5);
  fc:	82 b3       	in	r24, 0x12	; 18
  fe:	80 62       	ori	r24, 0x20	; 32
 100:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	2f e3       	ldi	r18, 0x3F	; 63
 104:	8d e0       	ldi	r24, 0x0D	; 13
 106:	93 e0       	ldi	r25, 0x03	; 3
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <__vector_1+0x1c>
 110:	00 c0       	rjmp	.+0      	; 0x112 <__vector_1+0x26>
 112:	00 00       	nop
	
	_delay_ms(1000);
	
	//RISE FLAG
	GIFR |= (1<<6);
 114:	8a b7       	in	r24, 0x3a	; 58
 116:	80 64       	ori	r24, 0x40	; 64
 118:	8a bf       	out	0x3a, r24	; 58
	
}
 11a:	9f 91       	pop	r25
 11c:	8f 91       	pop	r24
 11e:	2f 91       	pop	r18
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <__vector_2>:

ISR(INT1_vect)
{
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	2f 93       	push	r18
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
	//LED ON
	PORTD |= (1<<6);
 13a:	82 b3       	in	r24, 0x12	; 18
 13c:	80 64       	ori	r24, 0x40	; 64
 13e:	82 bb       	out	0x12, r24	; 18
 140:	2f e3       	ldi	r18, 0x3F	; 63
 142:	8d e0       	ldi	r24, 0x0D	; 13
 144:	93 e0       	ldi	r25, 0x03	; 3
 146:	21 50       	subi	r18, 0x01	; 1
 148:	80 40       	sbci	r24, 0x00	; 0
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <__vector_2+0x1c>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <__vector_2+0x26>
 150:	00 00       	nop
	
	_delay_ms(1000);
	
	//RISE FLAG
	GIFR |= (1<<7);
 152:	8a b7       	in	r24, 0x3a	; 58
 154:	80 68       	ori	r24, 0x80	; 128
 156:	8a bf       	out	0x3a, r24	; 58
	
}
 158:	9f 91       	pop	r25
 15a:	8f 91       	pop	r24
 15c:	2f 91       	pop	r18
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <__vector_3>:

ISR(INT2_vect)
{
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	0f 92       	push	r0
 170:	11 24       	eor	r1, r1
 172:	2f 93       	push	r18
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
	//LED ON
	PORTD |= (1<<7);
 178:	82 b3       	in	r24, 0x12	; 18
 17a:	80 68       	ori	r24, 0x80	; 128
 17c:	82 bb       	out	0x12, r24	; 18
 17e:	2f e3       	ldi	r18, 0x3F	; 63
 180:	8d e0       	ldi	r24, 0x0D	; 13
 182:	93 e0       	ldi	r25, 0x03	; 3
 184:	21 50       	subi	r18, 0x01	; 1
 186:	80 40       	sbci	r24, 0x00	; 0
 188:	90 40       	sbci	r25, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <__vector_3+0x1c>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <__vector_3+0x26>
 18e:	00 00       	nop
	
	_delay_ms(1000);
	
	//RISE FLAG
	GIFR |= (1<<5);
 190:	8a b7       	in	r24, 0x3a	; 58
 192:	80 62       	ori	r24, 0x20	; 32
 194:	8a bf       	out	0x3a, r24	; 58
	
 196:	9f 91       	pop	r25
 198:	8f 91       	pop	r24
 19a:	2f 91       	pop	r18
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <_exit>:
 1a6:	f8 94       	cli

000001a8 <__stop_program>:
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <__stop_program>
