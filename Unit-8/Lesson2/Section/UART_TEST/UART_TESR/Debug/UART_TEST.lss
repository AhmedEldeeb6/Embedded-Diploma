
UART_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000536  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000536  000005aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001602  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008f6  00000000  00000000  00001d56  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b48  00000000  00000000  0000264c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000248  00000000  00000000  00003194  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000584  00000000  00000000  000033dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cc2  00000000  00000000  00003960  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00004622  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e3       	ldi	r30, 0x36	; 54
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5f 02 	call	0x4be	; 0x4be <main>
  8a:	0c 94 99 02 	jmp	0x532	; 0x532 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPinDirection>:
/* MCAL */
#include "DIO_INTERFACE.h"
/* Pin Apis */
void DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PinDirection )
{
	if((PortId<=3) && (PinId<=7) && ((PinDirection==DIO_PIN_OUTPUT) || (PinDirection==DIO_PIN_INPUT)))
  92:	84 30       	cpi	r24, 0x04	; 4
  94:	08 f0       	brcs	.+2      	; 0x98 <DIO_SetPinDirection+0x6>
  96:	72 c0       	rjmp	.+228    	; 0x17c <DIO_SetPinDirection+0xea>
  98:	68 30       	cpi	r22, 0x08	; 8
  9a:	08 f0       	brcs	.+2      	; 0x9e <DIO_SetPinDirection+0xc>
  9c:	6f c0       	rjmp	.+222    	; 0x17c <DIO_SetPinDirection+0xea>
  9e:	42 30       	cpi	r20, 0x02	; 2
  a0:	08 f0       	brcs	.+2      	; 0xa4 <DIO_SetPinDirection+0x12>
  a2:	6c c0       	rjmp	.+216    	; 0x17c <DIO_SetPinDirection+0xea>
	{
	switch(PortId)
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	01 f1       	breq	.+64     	; 0xe8 <DIO_SetPinDirection+0x56>
  a8:	30 f0       	brcs	.+12     	; 0xb6 <DIO_SetPinDirection+0x24>
  aa:	82 30       	cpi	r24, 0x02	; 2
  ac:	b1 f1       	breq	.+108    	; 0x11a <DIO_SetPinDirection+0x88>
  ae:	83 30       	cpi	r24, 0x03	; 3
  b0:	09 f4       	brne	.+2      	; 0xb4 <DIO_SetPinDirection+0x22>
  b2:	4c c0       	rjmp	.+152    	; 0x14c <DIO_SetPinDirection+0xba>
  b4:	08 95       	ret
	{
		case 0: // DIO_PORTA
		if (DIO_PIN_OUTPUT==PinDirection)
  b6:	41 30       	cpi	r20, 0x01	; 1
  b8:	59 f4       	brne	.+22     	; 0xd0 <DIO_SetPinDirection+0x3e>
		{
			SET(DDRA,PinId);
  ba:	2a b3       	in	r18, 0x1a	; 26
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIO_SetPinDirection+0x34>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIO_SetPinDirection+0x30>
  ca:	82 2b       	or	r24, r18
  cc:	8a bb       	out	0x1a, r24	; 26
  ce:	08 95       	ret
		}
		else 
		{
			RESET(DDRA,PinId);
  d0:	2a b3       	in	r18, 0x1a	; 26
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_SetPinDirection+0x4a>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_SetPinDirection+0x46>
  e0:	80 95       	com	r24
  e2:	82 23       	and	r24, r18
  e4:	8a bb       	out	0x1a, r24	; 26
  e6:	08 95       	ret
		}
		break;
		
		case 1: // DIO_PORTB
		if (DIO_PIN_OUTPUT==PinDirection)
  e8:	41 30       	cpi	r20, 0x01	; 1
  ea:	59 f4       	brne	.+22     	; 0x102 <DIO_SetPinDirection+0x70>
		{
			SET(DDRB,PinId);
  ec:	27 b3       	in	r18, 0x17	; 23
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_SetPinDirection+0x66>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_SetPinDirection+0x62>
  fc:	82 2b       	or	r24, r18
  fe:	87 bb       	out	0x17, r24	; 23
 100:	08 95       	ret
		}
		else
		{
			RESET(DDRB,PinId);
 102:	27 b3       	in	r18, 0x17	; 23
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_SetPinDirection+0x7c>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_SetPinDirection+0x78>
 112:	80 95       	com	r24
 114:	82 23       	and	r24, r18
 116:	87 bb       	out	0x17, r24	; 23
 118:	08 95       	ret
		}
		break;
		
		case 2: // DIO_PORTC
		if (DIO_PIN_OUTPUT==PinDirection)
 11a:	41 30       	cpi	r20, 0x01	; 1
 11c:	59 f4       	brne	.+22     	; 0x134 <DIO_SetPinDirection+0xa2>
		{
			SET(DDRC,PinId);
 11e:	24 b3       	in	r18, 0x14	; 20
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_SetPinDirection+0x98>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_SetPinDirection+0x94>
 12e:	82 2b       	or	r24, r18
 130:	84 bb       	out	0x14, r24	; 20
 132:	08 95       	ret
		}
		else
		{
			RESET(DDRC,PinId);
 134:	24 b3       	in	r18, 0x14	; 20
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_SetPinDirection+0xae>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_SetPinDirection+0xaa>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	84 bb       	out	0x14, r24	; 20
 14a:	08 95       	ret
		}
		break;
		
		case 3: // DIO_PORTD
		if (DIO_PIN_OUTPUT==PinDirection)
 14c:	41 30       	cpi	r20, 0x01	; 1
 14e:	59 f4       	brne	.+22     	; 0x166 <DIO_SetPinDirection+0xd4>
		{
			SET(DDRD,PinId);
 150:	21 b3       	in	r18, 0x11	; 17
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_SetPinDirection+0xca>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_SetPinDirection+0xc6>
 160:	82 2b       	or	r24, r18
 162:	81 bb       	out	0x11, r24	; 17
 164:	08 95       	ret
		}
		else
		{
			RESET(DDRD,PinId);
 166:	21 b3       	in	r18, 0x11	; 17
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_SetPinDirection+0xe0>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_SetPinDirection+0xdc>
 176:	80 95       	com	r24
 178:	82 23       	and	r24, r18
 17a:	81 bb       	out	0x11, r24	; 17
 17c:	08 95       	ret

0000017e <DIO_SetPinValue>:
	}
	}
}
void DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	if ((PortId<=3) && (PinId<=7) && ((PinValue==DIO_PIN_HIGH) || (PinValue==DIO_PIN_LOW) ))
 17e:	84 30       	cpi	r24, 0x04	; 4
 180:	08 f0       	brcs	.+2      	; 0x184 <DIO_SetPinValue+0x6>
 182:	72 c0       	rjmp	.+228    	; 0x268 <DIO_SetPinValue+0xea>
 184:	68 30       	cpi	r22, 0x08	; 8
 186:	08 f0       	brcs	.+2      	; 0x18a <DIO_SetPinValue+0xc>
 188:	6f c0       	rjmp	.+222    	; 0x268 <DIO_SetPinValue+0xea>
 18a:	42 30       	cpi	r20, 0x02	; 2
 18c:	08 f0       	brcs	.+2      	; 0x190 <DIO_SetPinValue+0x12>
 18e:	6c c0       	rjmp	.+216    	; 0x268 <DIO_SetPinValue+0xea>
	{
		switch(PortId)
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	01 f1       	breq	.+64     	; 0x1d4 <DIO_SetPinValue+0x56>
 194:	30 f0       	brcs	.+12     	; 0x1a2 <DIO_SetPinValue+0x24>
 196:	82 30       	cpi	r24, 0x02	; 2
 198:	b1 f1       	breq	.+108    	; 0x206 <DIO_SetPinValue+0x88>
 19a:	83 30       	cpi	r24, 0x03	; 3
 19c:	09 f4       	brne	.+2      	; 0x1a0 <DIO_SetPinValue+0x22>
 19e:	4c c0       	rjmp	.+152    	; 0x238 <DIO_SetPinValue+0xba>
 1a0:	08 95       	ret
		{
			case 0: //DIO_PORTA
					if (DIO_PIN_HIGH==PinValue)
 1a2:	41 30       	cpi	r20, 0x01	; 1
 1a4:	59 f4       	brne	.+22     	; 0x1bc <DIO_SetPinValue+0x3e>
					{
						SET(PORTA,PinId);
 1a6:	2b b3       	in	r18, 0x1b	; 27
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_SetPinValue+0x34>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_SetPinValue+0x30>
 1b6:	82 2b       	or	r24, r18
 1b8:	8b bb       	out	0x1b, r24	; 27
 1ba:	08 95       	ret
					}	
					else
					RESET(PORTA,PinId);
 1bc:	2b b3       	in	r18, 0x1b	; 27
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_SetPinValue+0x4a>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_SetPinValue+0x46>
 1cc:	80 95       	com	r24
 1ce:	82 23       	and	r24, r18
 1d0:	8b bb       	out	0x1b, r24	; 27
 1d2:	08 95       	ret
					break;
					
			case 1: //DIO_PORTB
			if (DIO_PIN_HIGH==PinValue)
 1d4:	41 30       	cpi	r20, 0x01	; 1
 1d6:	59 f4       	brne	.+22     	; 0x1ee <DIO_SetPinValue+0x70>
			{
				SET(PORTB,PinId);
 1d8:	28 b3       	in	r18, 0x18	; 24
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_SetPinValue+0x66>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_SetPinValue+0x62>
 1e8:	82 2b       	or	r24, r18
 1ea:	88 bb       	out	0x18, r24	; 24
 1ec:	08 95       	ret
			}
			else
			RESET(PORTB,PinId);
 1ee:	28 b3       	in	r18, 0x18	; 24
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_SetPinValue+0x7c>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_SetPinValue+0x78>
 1fe:	80 95       	com	r24
 200:	82 23       	and	r24, r18
 202:	88 bb       	out	0x18, r24	; 24
 204:	08 95       	ret
			break;
			
			case 2: //DIO_PORTC
			if (DIO_PIN_HIGH==PinValue)
 206:	41 30       	cpi	r20, 0x01	; 1
 208:	59 f4       	brne	.+22     	; 0x220 <DIO_SetPinValue+0xa2>
			{
				SET(PORTC,PinId);
 20a:	25 b3       	in	r18, 0x15	; 21
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_SetPinValue+0x98>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_SetPinValue+0x94>
 21a:	82 2b       	or	r24, r18
 21c:	85 bb       	out	0x15, r24	; 21
 21e:	08 95       	ret
			}
			else
			RESET(PORTC,PinId);
 220:	25 b3       	in	r18, 0x15	; 21
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_SetPinValue+0xae>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	6a 95       	dec	r22
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_SetPinValue+0xaa>
 230:	80 95       	com	r24
 232:	82 23       	and	r24, r18
 234:	85 bb       	out	0x15, r24	; 21
 236:	08 95       	ret
			break;
			
			case 3: //DIO_PORTD
			if (DIO_PIN_HIGH==PinValue)
 238:	41 30       	cpi	r20, 0x01	; 1
 23a:	59 f4       	brne	.+22     	; 0x252 <DIO_SetPinValue+0xd4>
			{
				SET(PORTD,PinId);
 23c:	22 b3       	in	r18, 0x12	; 18
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_SetPinValue+0xca>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_SetPinValue+0xc6>
 24c:	82 2b       	or	r24, r18
 24e:	82 bb       	out	0x12, r24	; 18
 250:	08 95       	ret
			}
			else
			RESET(PORTD,PinId);  
 252:	22 b3       	in	r18, 0x12	; 18
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_SetPinValue+0xe0>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_SetPinValue+0xdc>
 262:	80 95       	com	r24
 264:	82 23       	and	r24, r18
 266:	82 bb       	out	0x12, r24	; 18
 268:	08 95       	ret

0000026a <LCD_Write_Half_Port>:
			}
		}
}

static void LCD_Write_Half_Port(u8 value)
{
 26a:	cf 93       	push	r28
 26c:	c8 2f       	mov	r28, r24
	if(1 ==GET(value,0))
 26e:	80 ff       	sbrs	r24, 0
 270:	06 c0       	rjmp	.+12     	; 0x27e <LCD_Write_Half_Port+0x14>
	{
		DIO_SetPinValue(DIO_PORTA,DIO_PIN4,DIO_PIN_HIGH);
 272:	41 e0       	ldi	r20, 0x01	; 1
 274:	64 e0       	ldi	r22, 0x04	; 4
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
 27c:	05 c0       	rjmp	.+10     	; 0x288 <LCD_Write_Half_Port+0x1e>
	}
	else 
	{
		DIO_SetPinValue(DIO_PORTA,DIO_PIN4,DIO_PIN_LOW);	
 27e:	40 e0       	ldi	r20, 0x00	; 0
 280:	64 e0       	ldi	r22, 0x04	; 4
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
	}
	
	if(1 ==GET(value,1))
 288:	c1 ff       	sbrs	r28, 1
 28a:	06 c0       	rjmp	.+12     	; 0x298 <LCD_Write_Half_Port+0x2e>
	{
		DIO_SetPinValue(DIO_PORTA,DIO_PIN5,DIO_PIN_HIGH);
 28c:	41 e0       	ldi	r20, 0x01	; 1
 28e:	65 e0       	ldi	r22, 0x05	; 5
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
 296:	05 c0       	rjmp	.+10     	; 0x2a2 <LCD_Write_Half_Port+0x38>
	}
	else
	{
		DIO_SetPinValue(DIO_PORTA,DIO_PIN5,DIO_PIN_LOW);
 298:	40 e0       	ldi	r20, 0x00	; 0
 29a:	65 e0       	ldi	r22, 0x05	; 5
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
	}
	
	if(1 ==GET(value,2))
 2a2:	c2 ff       	sbrs	r28, 2
 2a4:	06 c0       	rjmp	.+12     	; 0x2b2 <LCD_Write_Half_Port+0x48>
	{
		DIO_SetPinValue(DIO_PORTA,DIO_PIN6,DIO_PIN_HIGH);
 2a6:	41 e0       	ldi	r20, 0x01	; 1
 2a8:	66 e0       	ldi	r22, 0x06	; 6
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
 2b0:	05 c0       	rjmp	.+10     	; 0x2bc <LCD_Write_Half_Port+0x52>
	}
	else
	{
		DIO_SetPinValue(DIO_PORTA,DIO_PIN6,DIO_PIN_LOW);
 2b2:	40 e0       	ldi	r20, 0x00	; 0
 2b4:	66 e0       	ldi	r22, 0x06	; 6
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
	}
	
	if(1 ==GET(value,3))
 2bc:	c3 ff       	sbrs	r28, 3
 2be:	06 c0       	rjmp	.+12     	; 0x2cc <LCD_Write_Half_Port+0x62>
	{
		DIO_SetPinValue(DIO_PORTA,DIO_PIN7,DIO_PIN_HIGH);
 2c0:	41 e0       	ldi	r20, 0x01	; 1
 2c2:	67 e0       	ldi	r22, 0x07	; 7
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
 2ca:	05 c0       	rjmp	.+10     	; 0x2d6 <LCD_Write_Half_Port+0x6c>
	}
	else
	{
		DIO_SetPinValue(DIO_PORTA,DIO_PIN7,DIO_PIN_LOW);
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	67 e0       	ldi	r22, 0x07	; 7
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
	}
}
 2d6:	cf 91       	pop	r28
 2d8:	08 95       	ret

000002da <LCD_Send_Cmd>:
	LCD_Send_Cmd(0b00000110);
	

}
void LCD_Send_Cmd(u8 Cmd)
{
 2da:	cf 93       	push	r28
 2dc:	c8 2f       	mov	r28, r24
	//set Rs to 0 (write command)
	DIO_SetPinValue(DIO_PORTB,DIO_PIN1,DIO_PIN_LOW);
 2de:	40 e0       	ldi	r20, 0x00	; 0
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
	
	//set R/W to 0 to write 
	DIO_SetPinValue(DIO_PORTB,DIO_PIN2,DIO_PIN_LOW);
 2e8:	40 e0       	ldi	r20, 0x00	; 0
 2ea:	62 e0       	ldi	r22, 0x02	; 2
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
	
	//WRITE THE MOST 4 BITS COMMANDS ON DATA PINS
	LCD_Write_Half_Port(Cmd>>4);
 2f2:	8c 2f       	mov	r24, r28
 2f4:	82 95       	swap	r24
 2f6:	8f 70       	andi	r24, 0x0F	; 15
 2f8:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_Write_Half_Port>
	
	/*Enable pulse*/
	DIO_SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);
 2fc:	41 e0       	ldi	r20, 0x01	; 1
 2fe:	63 e0       	ldi	r22, 0x03	; 3
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 306:	8f e9       	ldi	r24, 0x9F	; 159
 308:	9f e0       	ldi	r25, 0x0F	; 15
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <LCD_Send_Cmd+0x30>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <LCD_Send_Cmd+0x36>
 310:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	63 e0       	ldi	r22, 0x03	; 3
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
	
	//WRITE THE LEAST 4 BITS COMMANDS ON DATA PINS
	LCD_Write_Half_Port(Cmd);
 31c:	8c 2f       	mov	r24, r28
 31e:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_Write_Half_Port>
	
	/*Enable pulse*/
	DIO_SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);
 322:	41 e0       	ldi	r20, 0x01	; 1
 324:	63 e0       	ldi	r22, 0x03	; 3
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
 32c:	8f e9       	ldi	r24, 0x9F	; 159
 32e:	9f e0       	ldi	r25, 0x0F	; 15
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <LCD_Send_Cmd+0x56>
 334:	00 c0       	rjmp	.+0      	; 0x336 <LCD_Send_Cmd+0x5c>
 336:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
 338:	40 e0       	ldi	r20, 0x00	; 0
 33a:	63 e0       	ldi	r22, 0x03	; 3
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
}
 342:	cf 91       	pop	r28
 344:	08 95       	ret

00000346 <LCD_Init>:
 346:	2f e7       	ldi	r18, 0x7F	; 127
 348:	85 eb       	ldi	r24, 0xB5	; 181
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	21 50       	subi	r18, 0x01	; 1
 34e:	80 40       	sbci	r24, 0x00	; 0
 350:	90 40       	sbci	r25, 0x00	; 0
 352:	e1 f7       	brne	.-8      	; 0x34c <LCD_Init+0x6>
 354:	00 c0       	rjmp	.+0      	; 0x356 <LCD_Init+0x10>
 356:	00 00       	nop
void LCD_Init(void)
{
	_delay_ms(35);
	
	//set Rs to 0 (write command)
	DIO_SetPinValue(DIO_PORTB,DIO_PIN1,DIO_PIN_LOW);
 358:	40 e0       	ldi	r20, 0x00	; 0
 35a:	61 e0       	ldi	r22, 0x01	; 1
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
	
	//set R/W to 0 to write
	DIO_SetPinValue(DIO_PORTB,DIO_PIN2,DIO_PIN_LOW);
 362:	40 e0       	ldi	r20, 0x00	; 0
 364:	62 e0       	ldi	r22, 0x02	; 2
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
	
	//WRITE THE MOST 4 BITS COMMANDS ON DATA PINS
	LCD_Write_Half_Port(0b0010);
 36c:	82 e0       	ldi	r24, 0x02	; 2
 36e:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_Write_Half_Port>
	
	/*Enable pulse*/
	DIO_SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);
 372:	41 e0       	ldi	r20, 0x01	; 1
 374:	63 e0       	ldi	r22, 0x03	; 3
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
 37c:	8f e9       	ldi	r24, 0x9F	; 159
 37e:	9f e0       	ldi	r25, 0x0F	; 15
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <LCD_Init+0x3a>
 384:	00 c0       	rjmp	.+0      	; 0x386 <LCD_Init+0x40>
 386:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
 388:	40 e0       	ldi	r20, 0x00	; 0
 38a:	63 e0       	ldi	r22, 0x03	; 3
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
	
	// the initialization the 8 bits
	LCD_Send_Cmd(0b00101000);
 392:	88 e2       	ldi	r24, 0x28	; 40
 394:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_Send_Cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 398:	90 ef       	ldi	r25, 0xF0	; 240
 39a:	9a 95       	dec	r25
 39c:	f1 f7       	brne	.-4      	; 0x39a <LCD_Init+0x54>
	_delay_us(45);
	
	//Display on, cursor on,blink on
	LCD_Send_Cmd(0b00001100);
 39e:	8c e0       	ldi	r24, 0x0C	; 12
 3a0:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_Send_Cmd>
 3a4:	20 ef       	ldi	r18, 0xF0	; 240
 3a6:	2a 95       	dec	r18
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <LCD_Init+0x60>
	_delay_us(45);
	
	//clear display 
	LCD_Send_Cmd(0b00000001);
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_Send_Cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b0:	8f ef       	ldi	r24, 0xFF	; 255
 3b2:	98 e1       	ldi	r25, 0x18	; 24
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <LCD_Init+0x6e>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <LCD_Init+0x74>
 3ba:	00 00       	nop
	_delay_ms(1.6);
	
	//Entry mode 
	LCD_Send_Cmd(0b00000110);
 3bc:	86 e0       	ldi	r24, 0x06	; 6
 3be:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_Send_Cmd>
 3c2:	08 95       	ret

000003c4 <LCD_Send_Char>:
	_delay_ms(1);
	DIO_SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
}

void LCD_Send_Char(u8 Data)
{
 3c4:	cf 93       	push	r28
 3c6:	c8 2f       	mov	r28, r24
	//set Rs to 1 (write data)
	DIO_SetPinValue(DIO_PORTB,DIO_PIN1,DIO_PIN_HIGH);
 3c8:	41 e0       	ldi	r20, 0x01	; 1
 3ca:	61 e0       	ldi	r22, 0x01	; 1
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
	
	//set R/W to 0 to write
	DIO_SetPinValue(DIO_PORTB,DIO_PIN2,DIO_PIN_LOW);
 3d2:	40 e0       	ldi	r20, 0x00	; 0
 3d4:	62 e0       	ldi	r22, 0x02	; 2
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
	
	//WRITE THE MOST 4 BITS DATA ON DATA PINS
	LCD_Write_Half_Port(Data>>4);
 3dc:	8c 2f       	mov	r24, r28
 3de:	82 95       	swap	r24
 3e0:	8f 70       	andi	r24, 0x0F	; 15
 3e2:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_Write_Half_Port>
	
	/*Enable pulse*/
	DIO_SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);
 3e6:	41 e0       	ldi	r20, 0x01	; 1
 3e8:	63 e0       	ldi	r22, 0x03	; 3
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
 3f0:	8f e9       	ldi	r24, 0x9F	; 159
 3f2:	9f e0       	ldi	r25, 0x0F	; 15
 3f4:	01 97       	sbiw	r24, 0x01	; 1
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <LCD_Send_Char+0x30>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <LCD_Send_Char+0x36>
 3fa:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
 3fc:	40 e0       	ldi	r20, 0x00	; 0
 3fe:	63 e0       	ldi	r22, 0x03	; 3
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
	
	//WRITE THE LEAST 4 BITS DATA ON DATA PINS
	LCD_Write_Half_Port(Data);
 406:	8c 2f       	mov	r24, r28
 408:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_Write_Half_Port>
	
	/*Enable pulse*/
	DIO_SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);
 40c:	41 e0       	ldi	r20, 0x01	; 1
 40e:	63 e0       	ldi	r22, 0x03	; 3
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
 416:	8f e9       	ldi	r24, 0x9F	; 159
 418:	9f e0       	ldi	r25, 0x0F	; 15
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 420:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
 422:	40 e0       	ldi	r20, 0x00	; 0
 424:	63 e0       	ldi	r22, 0x03	; 3
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinValue>
}
 42c:	cf 91       	pop	r28
 42e:	08 95       	ret

00000430 <LCD_Send_string>:
void LCD_Send_string(u8 *str) //store address value of the string in pointer *str
{	
 430:	0f 93       	push	r16
 432:	1f 93       	push	r17
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
	if (str!=NULL)
 438:	00 97       	sbiw	r24, 0x00	; 0
 43a:	29 f4       	brne	.+10     	; 0x446 <LCD_Send_string+0x16>
 43c:	0d c0       	rjmp	.+26     	; 0x458 <LCD_Send_string+0x28>
	{
	int character=0;
	while(str[character]!='\0') // loop will go on till the NULL character in the string
	{
		LCD_Send_Char(str[character]); // sending data on LCD byte by byte
 43e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_Send_Char>
		character++;
 442:	21 96       	adiw	r28, 0x01	; 1
 444:	03 c0       	rjmp	.+6      	; 0x44c <LCD_Send_string+0x1c>
 446:	8c 01       	movw	r16, r24
 448:	c0 e0       	ldi	r28, 0x00	; 0
 44a:	d0 e0       	ldi	r29, 0x00	; 0
void LCD_Send_string(u8 *str) //store address value of the string in pointer *str
{	
	if (str!=NULL)
	{
	int character=0;
	while(str[character]!='\0') // loop will go on till the NULL character in the string
 44c:	f8 01       	movw	r30, r16
 44e:	ec 0f       	add	r30, r28
 450:	fd 1f       	adc	r31, r29
 452:	80 81       	ld	r24, Z
 454:	81 11       	cpse	r24, r1
 456:	f3 cf       	rjmp	.-26     	; 0x43e <LCD_Send_string+0xe>
		LCD_Send_Char(str[character]); // sending data on LCD byte by byte
		character++;
	}
	}
	return;
}
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	1f 91       	pop	r17
 45e:	0f 91       	pop	r16
 460:	08 95       	ret

00000462 <DIO_init>:
#include "KPD_INTERFACE.h"

void DIO_init(void)
{
		//lcd pins
		DIO_SetPinDirection(DIO_PORTA,DIO_PIN4,DIO_PIN_OUTPUT);//data lcd
 462:	41 e0       	ldi	r20, 0x01	; 1
 464:	64 e0       	ldi	r22, 0x04	; 4
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
		DIO_SetPinDirection(DIO_PORTA,DIO_PIN5,DIO_PIN_OUTPUT);//data lcd
 46c:	41 e0       	ldi	r20, 0x01	; 1
 46e:	65 e0       	ldi	r22, 0x05	; 5
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
		DIO_SetPinDirection(DIO_PORTA,DIO_PIN6,DIO_PIN_OUTPUT);//data lcd
 476:	41 e0       	ldi	r20, 0x01	; 1
 478:	66 e0       	ldi	r22, 0x06	; 6
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
		DIO_SetPinDirection(DIO_PORTA,DIO_PIN7,DIO_PIN_OUTPUT);//data lcd
 480:	41 e0       	ldi	r20, 0x01	; 1
 482:	67 e0       	ldi	r22, 0x07	; 7
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
		DIO_SetPinDirection(DIO_PORTB,DIO_PIN1,DIO_PIN_OUTPUT);// lcd RS
 48a:	41 e0       	ldi	r20, 0x01	; 1
 48c:	61 e0       	ldi	r22, 0x01	; 1
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
		DIO_SetPinDirection(DIO_PORTB,DIO_PIN2,DIO_PIN_OUTPUT);// lcd RW
 494:	41 e0       	ldi	r20, 0x01	; 1
 496:	62 e0       	ldi	r22, 0x02	; 2
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
		DIO_SetPinDirection(DIO_PORTB,DIO_PIN3,DIO_PIN_OUTPUT);// lcd EN
 49e:	41 e0       	ldi	r20, 0x01	; 1
 4a0:	63 e0       	ldi	r22, 0x03	; 3
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
		
		//uart
		DIO_SetPinDirection(DIO_PORTD,DIO_PIN0,DIO_PIN_INPUT);
 4a8:	40 e0       	ldi	r20, 0x00	; 0
 4aa:	60 e0       	ldi	r22, 0x00	; 0
 4ac:	83 e0       	ldi	r24, 0x03	; 3
 4ae:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
		DIO_SetPinDirection(DIO_PORTD,DIO_PIN1,DIO_PIN_OUTPUT);
 4b2:	41 e0       	ldi	r20, 0x01	; 1
 4b4:	61 e0       	ldi	r22, 0x01	; 1
 4b6:	83 e0       	ldi	r24, 0x03	; 3
 4b8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
 4bc:	08 95       	ret

000004be <main>:
				};

int main(void)
{

	DIO_init();
 4be:	0e 94 31 02 	call	0x462	; 0x462 <DIO_init>
	LCD_Init();
 4c2:	0e 94 a3 01 	call	0x346	; 0x346 <LCD_Init>
	LCD_Send_string("UART TR");
 4c6:	80 e6       	ldi	r24, 0x60	; 96
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 18 02 	call	0x430	; 0x430 <LCD_Send_string>
	LCD_Send_Cmd(0xC0);
 4ce:	80 ec       	ldi	r24, 0xC0	; 192
 4d0:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_Send_Cmd>
	
	UART_init();
 4d4:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <UART_init>
	UART_Send_String("Ahmed");
 4d8:	88 e6       	ldi	r24, 0x68	; 104
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	0e 94 8c 02 	call	0x518	; 0x518 <UART_Send_String>
	UART_Send('T');
 4e0:	84 e5       	ldi	r24, 0x54	; 84
 4e2:	0e 94 84 02 	call	0x508	; 0x508 <UART_Send>
	u8 x;
    /* Replace with your application code */
    while (1) 
    {
		LCD_Send_Cmd(0xC0);
 4e6:	80 ec       	ldi	r24, 0xC0	; 192
 4e8:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_Send_Cmd>

		x=UART_Receive();
 4ec:	0e 94 88 02 	call	0x510	; 0x510 <UART_Receive>

		LCD_Send_Char(x);
 4f0:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_Send_Char>
 4f4:	f8 cf       	rjmp	.-16     	; 0x4e6 <main+0x28>

000004f6 <UART_init>:
// APIs

void UART_init (void)
{
	// BoadRate
	UBRRL = 51 ;
 4f6:	83 e3       	ldi	r24, 0x33	; 51
 4f8:	89 b9       	out	0x09, r24	; 9
	
	UCSRA &= ~(1<<1);
 4fa:	8b b1       	in	r24, 0x0b	; 11
 4fc:	8d 7f       	andi	r24, 0xFD	; 253
 4fe:	8b b9       	out	0x0b, r24	; 11
	//no parity
	// 8-bit data
	
	// Enable
	
	UCSRB |= (0b11<<3);
 500:	8a b1       	in	r24, 0x0a	; 10
 502:	88 61       	ori	r24, 0x18	; 24
 504:	8a b9       	out	0x0a, r24	; 10
 506:	08 95       	ret

00000508 <UART_Send>:
	
}

void UART_Send (u8 data)
{
	while( !((UCSRA>> 5) & 1) );
 508:	5d 9b       	sbis	0x0b, 5	; 11
 50a:	fe cf       	rjmp	.-4      	; 0x508 <UART_Send>
	UDR= data ;
 50c:	8c b9       	out	0x0c, r24	; 12
 50e:	08 95       	ret

00000510 <UART_Receive>:
}

u8 UART_Receive (void)
{
	while( !((UCSRA >> 7) & 1) );
 510:	5f 9b       	sbis	0x0b, 7	; 11
 512:	fe cf       	rjmp	.-4      	; 0x510 <UART_Receive>
	return UDR ;
 514:	8c b1       	in	r24, 0x0c	; 12
}
 516:	08 95       	ret

00000518 <UART_Send_String>:

void UART_Send_String (char* p)
{
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	ec 01       	movw	r28, r24
	while(*p){
 51e:	03 c0       	rjmp	.+6      	; 0x526 <UART_Send_String+0xe>
		UART_Send(*p);
 520:	0e 94 84 02 	call	0x508	; 0x508 <UART_Send>
		p++;
 524:	21 96       	adiw	r28, 0x01	; 1
	return UDR ;
}

void UART_Send_String (char* p)
{
	while(*p){
 526:	88 81       	ld	r24, Y
 528:	81 11       	cpse	r24, r1
 52a:	fa cf       	rjmp	.-12     	; 0x520 <UART_Send_String+0x8>
		UART_Send(*p);
		p++;
	}
}
 52c:	df 91       	pop	r29
 52e:	cf 91       	pop	r28
 530:	08 95       	ret

00000532 <_exit>:
 532:	f8 94       	cli

00000534 <__stop_program>:
 534:	ff cf       	rjmp	.-2      	; 0x534 <__stop_program>
