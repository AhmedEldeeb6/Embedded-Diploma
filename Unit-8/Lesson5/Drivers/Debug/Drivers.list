
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d34  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000e64  08000e64  00010e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e7c  08000e7c  00010e84  2**0
                  CONTENTS
  4 .ARM          00000000  08000e7c  08000e7c  00010e84  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e7c  08000e84  00010e84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e7c  08000e7c  00010e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e80  08000e80  00010e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000000  08000e84  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  08000e84  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010e84  2**0
                  CONTENTS, READONLY
 12 .debug_info   000052e7  00000000  00000000  00010ead  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000cff  00000000  00000000  00016194  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000dc8  00000000  00000000  00016e93  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000238  00000000  00000000  00017c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001d0  00000000  00000000  00017e98  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000d96  00000000  00000000  00018068  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002871  00000000  00000000  00018dfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a94b  00000000  00000000  0001b66f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00025fba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000720  00000000  00000000  00026038  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000e4c 	.word	0x08000e4c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000e4c 	.word	0x08000e4c

08000170 <clock_init>:
#include "stm32f103x8_SPI_driver.h"

unsigned char ch ;

void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

	RCC_GPIOA_CLK_EN();
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clock_init+0x24>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clock_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clock_init+0x24>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clock_init+0x24>)
 8000186:	f043 0301 	orr.w	r3, r3, #1
 800018a:	6193      	str	r3, [r2, #24]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021000 	.word	0x40021000

08000198 <Eldeeb_UART_IRQ_CallBack>:
	}
#endif
}

void Eldeeb_UART_IRQ_CallBack (void)
{
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
    MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
    MCAL_SPI_TX_RX(SPI1, &ch, PollingEnable);
    MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);

#endif
}
 800019c:	bf00      	nop
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr

080001a4 <main>:
	for (i= 0 ; i<x ; i++)
		for (j= 0 ; j<255 ; j++);
}

int main(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b08c      	sub	sp, #48	; 0x30
 80001a8:	af00      	add	r7, sp, #0

	clock_init();
 80001aa:	f7ff ffe1 	bl	8000170 <clock_init>


	UART_Config UART_Cnfg;

	//USART1 init
	UART_Cnfg.BaudRate 			= UART_BaudRate_115200;
 80001ae:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80001b2:	61fb      	str	r3, [r7, #28]
	UART_Cnfg.USART_Mode 		= UART_MODE_TX_RX;
 80001b4:	230c      	movs	r3, #12
 80001b6:	763b      	strb	r3, [r7, #24]
	UART_Cnfg.Parity 			= UART_Parity__NONE;
 80001b8:	2300      	movs	r3, #0
 80001ba:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	UART_Cnfg.Payload_Length 	= UART_Payload_Length_8B;
 80001be:	2300      	movs	r3, #0
 80001c0:	f887 3020 	strb.w	r3, [r7, #32]
	UART_Cnfg.StopBits			= UART_StopBits__1;
 80001c4:	2300      	movs	r3, #0
 80001c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	UART_Cnfg.HwFlowCtl			= UART_HwFlowCtl_NONE;
 80001ca:	2300      	movs	r3, #0
 80001cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	UART_Cnfg.IRQ_Enable		= UART_IRQ_Enable_RXNEIE;
 80001d0:	2320      	movs	r3, #32
 80001d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	UART_Cnfg.P_IRQ_CallBack	= Eldeeb_UART_IRQ_CallBack;
 80001d6:	4b19      	ldr	r3, [pc, #100]	; (800023c <main+0x98>)
 80001d8:	62bb      	str	r3, [r7, #40]	; 0x28

	MCAL_UART_Init(USART1, &UART_Cnfg);
 80001da:	f107 0318 	add.w	r3, r7, #24
 80001de:	4619      	mov	r1, r3
 80001e0:	4817      	ldr	r0, [pc, #92]	; (8000240 <main+0x9c>)
 80001e2:	f000 fcc9 	bl	8000b78 <MCAL_UART_Init>


	MCAL_UART_GPIO_Set_Pins(USART1);
 80001e6:	4816      	ldr	r0, [pc, #88]	; (8000240 <main+0x9c>)
 80001e8:	f000 fd88 	bl	8000cfc <MCAL_UART_GPIO_Set_Pins>
	//PA7 >> SPI1_MOSI

	SPI_Config_t SPI1SFG ;

	//Common configuration
	SPI1SFG.CLK_Phase = SPI_Clock_Phase_2EDGE_first_data_capture_edge ;
 80001ec:	2301      	movs	r3, #1
 80001ee:	817b      	strh	r3, [r7, #10]
	SPI1SFG.CLK_Polarity = SPI_Clock_Polarity_HIGH_when_Idle ;
 80001f0:	2302      	movs	r3, #2
 80001f2:	813b      	strh	r3, [r7, #8]
	SPI1SFG.Data_Size = SPI_Frame_Format_8B ;
 80001f4:	2300      	movs	r3, #0
 80001f6:	80fb      	strh	r3, [r7, #6]
	SPI1SFG.Frame_Format = SPI_Frame_Format_MSB_transmitted_first ;
 80001f8:	2300      	movs	r3, #0
 80001fa:	80bb      	strh	r3, [r7, #4]
	//Assume by default pclk2 = 8MHz
	SPI1SFG.SPI_BAUDRATEPRESCALER = SPI_BaudRatePrescaler_8 ;
 80001fc:	2310      	movs	r3, #16
 80001fe:	81fb      	strh	r3, [r7, #14]
	SPI1SFG.Communication_Mode = SPI_DIRECTION_2LINES ;
 8000200:	2300      	movs	r3, #0
 8000202:	807b      	strh	r3, [r7, #2]
	SPI1SFG.NSS = SPI_NSS_SW_NSSInternalSoft_Set ;
	SPI1SFG.P_IRQ_CallBack = NULL ;

#endif

	MCAL_SPI_Init(SPI1, &SPI1SFG) ;
 8000204:	463b      	mov	r3, r7
 8000206:	4619      	mov	r1, r3
 8000208:	480e      	ldr	r0, [pc, #56]	; (8000244 <main+0xa0>)
 800020a:	f000 fad7 	bl	80007bc <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins(SPI1);
 800020e:	480d      	ldr	r0, [pc, #52]	; (8000244 <main+0xa0>)
 8000210:	f000 fb60 	bl	80008d4 <MCAL_SPI_GPIO_Set_Pins>

	//Configure SS on PA.4 By GPIO
	Pin_Cfg.GPIO_PinNumber = GPIO_PIN_4 ;
 8000214:	2310      	movs	r3, #16
 8000216:	85bb      	strh	r3, [r7, #44]	; 0x2c
	Pin_Cfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 8000218:	2304      	movs	r3, #4
 800021a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	Pin_Cfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 800021e:	2301      	movs	r3, #1
 8000220:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	MCAL_GPIO_Init(GPIOA, &Pin_Cfg);
 8000224:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000228:	4619      	mov	r1, r3
 800022a:	4807      	ldr	r0, [pc, #28]	; (8000248 <main+0xa4>)
 800022c:	f000 f89a 	bl	8000364 <MCAL_GPIO_Init>

    //Force the slave select (High) idle mode
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000230:	2201      	movs	r2, #1
 8000232:	2110      	movs	r1, #16
 8000234:	4804      	ldr	r0, [pc, #16]	; (8000248 <main+0xa4>)
 8000236:	f000 f93f 	bl	80004b8 <MCAL_GPIO_WritePin>

	while (1)
 800023a:	e7fe      	b.n	800023a <main+0x96>
 800023c:	08000199 	.word	0x08000199
 8000240:	40013800 	.word	0x40013800
 8000244:	80013000 	.word	0x80013000
 8000248:	40010800 	.word	0x40010800

0800024c <Reset_Handler>:
 800024c:	480d      	ldr	r0, [pc, #52]	; (8000284 <LoopForever+0x2>)
 800024e:	4685      	mov	sp, r0
 8000250:	f3af 8000 	nop.w
 8000254:	480c      	ldr	r0, [pc, #48]	; (8000288 <LoopForever+0x6>)
 8000256:	490d      	ldr	r1, [pc, #52]	; (800028c <LoopForever+0xa>)
 8000258:	4a0d      	ldr	r2, [pc, #52]	; (8000290 <LoopForever+0xe>)
 800025a:	2300      	movs	r3, #0
 800025c:	e002      	b.n	8000264 <LoopCopyDataInit>

0800025e <CopyDataInit>:
 800025e:	58d4      	ldr	r4, [r2, r3]
 8000260:	50c4      	str	r4, [r0, r3]
 8000262:	3304      	adds	r3, #4

08000264 <LoopCopyDataInit>:
 8000264:	18c4      	adds	r4, r0, r3
 8000266:	428c      	cmp	r4, r1
 8000268:	d3f9      	bcc.n	800025e <CopyDataInit>
 800026a:	4a0a      	ldr	r2, [pc, #40]	; (8000294 <LoopForever+0x12>)
 800026c:	4c0a      	ldr	r4, [pc, #40]	; (8000298 <LoopForever+0x16>)
 800026e:	2300      	movs	r3, #0
 8000270:	e001      	b.n	8000276 <LoopFillZerobss>

08000272 <FillZerobss>:
 8000272:	6013      	str	r3, [r2, #0]
 8000274:	3204      	adds	r2, #4

08000276 <LoopFillZerobss>:
 8000276:	42a2      	cmp	r2, r4
 8000278:	d3fb      	bcc.n	8000272 <FillZerobss>
 800027a:	f000 fdc3 	bl	8000e04 <__libc_init_array>
 800027e:	f7ff ff91 	bl	80001a4 <main>

08000282 <LoopForever>:
 8000282:	e7fe      	b.n	8000282 <LoopForever>
 8000284:	20002800 	.word	0x20002800
 8000288:	20000000 	.word	0x20000000
 800028c:	20000000 	.word	0x20000000
 8000290:	08000e84 	.word	0x08000e84
 8000294:	20000000 	.word	0x20000000
 8000298:	20000064 	.word	0x20000064

0800029c <ADC1_2_IRQHandler>:
 800029c:	e7fe      	b.n	800029c <ADC1_2_IRQHandler>

0800029e <Get_CRLH_Position>:
 * =======================================================================================
 * 							Generic Functions
 * =======================================================================================
 */
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 800029e:	b480      	push	{r7}
 80002a0:	b083      	sub	sp, #12
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	4603      	mov	r3, r0
 80002a6:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 80002a8:	88fb      	ldrh	r3, [r7, #6]
 80002aa:	2b80      	cmp	r3, #128	; 0x80
 80002ac:	d042      	beq.n	8000334 <Get_CRLH_Position+0x96>
 80002ae:	2b80      	cmp	r3, #128	; 0x80
 80002b0:	dc11      	bgt.n	80002d6 <Get_CRLH_Position+0x38>
 80002b2:	2b08      	cmp	r3, #8
 80002b4:	d036      	beq.n	8000324 <Get_CRLH_Position+0x86>
 80002b6:	2b08      	cmp	r3, #8
 80002b8:	dc06      	bgt.n	80002c8 <Get_CRLH_Position+0x2a>
 80002ba:	2b02      	cmp	r3, #2
 80002bc:	d02e      	beq.n	800031c <Get_CRLH_Position+0x7e>
 80002be:	2b04      	cmp	r3, #4
 80002c0:	d02e      	beq.n	8000320 <Get_CRLH_Position+0x82>
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d028      	beq.n	8000318 <Get_CRLH_Position+0x7a>
 80002c6:	e047      	b.n	8000358 <Get_CRLH_Position+0xba>
 80002c8:	2b20      	cmp	r3, #32
 80002ca:	d02f      	beq.n	800032c <Get_CRLH_Position+0x8e>
 80002cc:	2b40      	cmp	r3, #64	; 0x40
 80002ce:	d02f      	beq.n	8000330 <Get_CRLH_Position+0x92>
 80002d0:	2b10      	cmp	r3, #16
 80002d2:	d029      	beq.n	8000328 <Get_CRLH_Position+0x8a>
 80002d4:	e040      	b.n	8000358 <Get_CRLH_Position+0xba>
 80002d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80002da:	d033      	beq.n	8000344 <Get_CRLH_Position+0xa6>
 80002dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80002e0:	dc09      	bgt.n	80002f6 <Get_CRLH_Position+0x58>
 80002e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80002e6:	d029      	beq.n	800033c <Get_CRLH_Position+0x9e>
 80002e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80002ec:	d028      	beq.n	8000340 <Get_CRLH_Position+0xa2>
 80002ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002f2:	d021      	beq.n	8000338 <Get_CRLH_Position+0x9a>
 80002f4:	e030      	b.n	8000358 <Get_CRLH_Position+0xba>
 80002f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80002fa:	d027      	beq.n	800034c <Get_CRLH_Position+0xae>
 80002fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000300:	dc03      	bgt.n	800030a <Get_CRLH_Position+0x6c>
 8000302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000306:	d01f      	beq.n	8000348 <Get_CRLH_Position+0xaa>
 8000308:	e026      	b.n	8000358 <Get_CRLH_Position+0xba>
 800030a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800030e:	d01f      	beq.n	8000350 <Get_CRLH_Position+0xb2>
 8000310:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000314:	d01e      	beq.n	8000354 <Get_CRLH_Position+0xb6>
 8000316:	e01f      	b.n	8000358 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0 ;
 8000318:	2300      	movs	r3, #0
 800031a:	e01e      	b.n	800035a <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_1:
		return 4 ;
 800031c:	2304      	movs	r3, #4
 800031e:	e01c      	b.n	800035a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_2:
		return 8 ;
 8000320:	2308      	movs	r3, #8
 8000322:	e01a      	b.n	800035a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_3:
		return 12 ;
 8000324:	230c      	movs	r3, #12
 8000326:	e018      	b.n	800035a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_4:
		return 16 ;
 8000328:	2310      	movs	r3, #16
 800032a:	e016      	b.n	800035a <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_5:
		return 20 ;
 800032c:	2314      	movs	r3, #20
 800032e:	e014      	b.n	800035a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_6:
		return 24 ;
 8000330:	2318      	movs	r3, #24
 8000332:	e012      	b.n	800035a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_7:
		return 28 ;
 8000334:	231c      	movs	r3, #28
 8000336:	e010      	b.n	800035a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_8:
		return 0 ;
 8000338:	2300      	movs	r3, #0
 800033a:	e00e      	b.n	800035a <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9:
		return 4 ;
 800033c:	2304      	movs	r3, #4
 800033e:	e00c      	b.n	800035a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_10:
		return 8 ;
 8000340:	2308      	movs	r3, #8
 8000342:	e00a      	b.n	800035a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_11:
		return 12 ;
 8000344:	230c      	movs	r3, #12
 8000346:	e008      	b.n	800035a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_12:
		return 16 ;
 8000348:	2310      	movs	r3, #16
 800034a:	e006      	b.n	800035a <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_13:
		return 20 ;
 800034c:	2314      	movs	r3, #20
 800034e:	e004      	b.n	800035a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_14:
		return 24 ;
 8000350:	2318      	movs	r3, #24
 8000352:	e002      	b.n	800035a <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_15:
		return 28 ;
 8000354:	231c      	movs	r3, #28
 8000356:	e000      	b.n	800035a <Get_CRLH_Position+0xbc>
		break ;


	}
return 0 ;
 8000358:	2300      	movs	r3, #0

}
 800035a:	4618      	mov	r0, r3
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr

08000364 <MCAL_GPIO_Init>:
 * @retval 			-none
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init  (GPIO_TypeDef *GPIOx , GPIO_PinConfig_t* PinConfig)
{
 8000364:	b590      	push	{r4, r7, lr}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	6039      	str	r1, [r7, #0]
	volatile uint32_t* configregister = NULL ;
 800036e:	2300      	movs	r3, #0
 8000370:	60fb      	str	r3, [r7, #12]
	uint8_t	PIN_Config = 0 ;
 8000372:	2300      	movs	r3, #0
 8000374:	72fb      	strb	r3, [r7, #11]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	881b      	ldrh	r3, [r3, #0]
 800037a:	2bff      	cmp	r3, #255	; 0xff
 800037c:	d801      	bhi.n	8000382 <MCAL_GPIO_Init+0x1e>
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	e001      	b.n	8000386 <MCAL_GPIO_Init+0x22>
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	3304      	adds	r3, #4
 8000386:	60fb      	str	r3, [r7, #12]

	//CNF0[1:0] MODE0[1:0=]   Clear the four Bits
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	881b      	ldrh	r3, [r3, #0]
 800038c:	4618      	mov	r0, r3
 800038e:	f7ff ff86 	bl	800029e <Get_CRLH_Position>
 8000392:	4603      	mov	r3, r0
 8000394:	461a      	mov	r2, r3
 8000396:	230f      	movs	r3, #15
 8000398:	4093      	lsls	r3, r2
 800039a:	43da      	mvns	r2, r3
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	401a      	ands	r2, r3
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP ) ||  (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD ) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD ) ||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP ))
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	789b      	ldrb	r3, [r3, #2]
 80003aa:	2b04      	cmp	r3, #4
 80003ac:	d00b      	beq.n	80003c6 <MCAL_GPIO_Init+0x62>
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	789b      	ldrb	r3, [r3, #2]
 80003b2:	2b05      	cmp	r3, #5
 80003b4:	d007      	beq.n	80003c6 <MCAL_GPIO_Init+0x62>
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	789b      	ldrb	r3, [r3, #2]
 80003ba:	2b07      	cmp	r3, #7
 80003bc:	d003      	beq.n	80003c6 <MCAL_GPIO_Init+0x62>
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	789b      	ldrb	r3, [r3, #2]
 80003c2:	2b06      	cmp	r3, #6
 80003c4:	d11c      	bne.n	8000400 <MCAL_GPIO_Init+0x9c>
	{
		PIN_Config  =  (  ( ( (PinConfig->GPIO_MODE - 4) <<2 ) |  PinConfig->GPIO_Output_Speed   ) & 0x0F );
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	789b      	ldrb	r3, [r3, #2]
 80003ca:	3b04      	subs	r3, #4
 80003cc:	009b      	lsls	r3, r3, #2
 80003ce:	b25a      	sxtb	r2, r3
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	78db      	ldrb	r3, [r3, #3]
 80003d4:	b25b      	sxtb	r3, r3
 80003d6:	4313      	orrs	r3, r2
 80003d8:	b25b      	sxtb	r3, r3
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	f003 030f 	and.w	r3, r3, #15
 80003e0:	72fb      	strb	r3, [r7, #11]
		(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 80003e2:	7afc      	ldrb	r4, [r7, #11]
 80003e4:	683b      	ldr	r3, [r7, #0]
 80003e6:	881b      	ldrh	r3, [r3, #0]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ff58 	bl	800029e <Get_CRLH_Position>
 80003ee:	4603      	mov	r3, r0
 80003f0:	fa04 f203 	lsl.w	r2, r4, r3
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	431a      	orrs	r2, r3
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	e057      	b.n	80004b0 <MCAL_GPIO_Init+0x14c>
	}
	//if pin is input
	else //MODE =  00: Input mode (reset state)
	{
		if (  (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG ) || (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO ) )
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	789b      	ldrb	r3, [r3, #2]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d003      	beq.n	8000410 <MCAL_GPIO_Init+0xac>
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	789b      	ldrb	r3, [r3, #2]
 800040c:	2b01      	cmp	r3, #1
 800040e:	d115      	bne.n	800043c <MCAL_GPIO_Init+0xd8>
		{
			PIN_Config  =  (  ( ( PinConfig->GPIO_MODE <<2 ) |  0x0   ) & 0x0F );
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	789b      	ldrb	r3, [r3, #2]
 8000414:	009b      	lsls	r3, r3, #2
 8000416:	b2db      	uxtb	r3, r3
 8000418:	f003 030f 	and.w	r3, r3, #15
 800041c:	72fb      	strb	r3, [r7, #11]
			(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 800041e:	7afc      	ldrb	r4, [r7, #11]
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	881b      	ldrh	r3, [r3, #0]
 8000424:	4618      	mov	r0, r3
 8000426:	f7ff ff3a 	bl	800029e <Get_CRLH_Position>
 800042a:	4603      	mov	r3, r0
 800042c:	fa04 f203 	lsl.w	r2, r4, r3
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	431a      	orrs	r2, r3
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	e039      	b.n	80004b0 <MCAL_GPIO_Init+0x14c>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT )
 800043c:	683b      	ldr	r3, [r7, #0]
 800043e:	789b      	ldrb	r3, [r3, #2]
 8000440:	2b08      	cmp	r3, #8
 8000442:	d110      	bne.n	8000466 <MCAL_GPIO_Init+0x102>
		{
			PIN_Config  =  (  ( ( GPIO_MODE_INPUT_FLO <<2 ) |  0x0   ) & 0x0F );
 8000444:	2304      	movs	r3, #4
 8000446:	72fb      	strb	r3, [r7, #11]
			(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 8000448:	7afc      	ldrb	r4, [r7, #11]
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	881b      	ldrh	r3, [r3, #0]
 800044e:	4618      	mov	r0, r3
 8000450:	f7ff ff25 	bl	800029e <Get_CRLH_Position>
 8000454:	4603      	mov	r3, r0
 8000456:	fa04 f203 	lsl.w	r2, r4, r3
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	431a      	orrs	r2, r3
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	601a      	str	r2, [r3, #0]
			}

		}
	}

}
 8000464:	e024      	b.n	80004b0 <MCAL_GPIO_Init+0x14c>
			PIN_Config  =  (  ( ( GPIO_MODE_INPUT_PU <<2 ) |  0x0   ) & 0x0F );
 8000466:	2308      	movs	r3, #8
 8000468:	72fb      	strb	r3, [r7, #11]
			(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 800046a:	7afc      	ldrb	r4, [r7, #11]
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	881b      	ldrh	r3, [r3, #0]
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff ff14 	bl	800029e <Get_CRLH_Position>
 8000476:	4603      	mov	r3, r0
 8000478:	fa04 f203 	lsl.w	r2, r4, r3
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	431a      	orrs	r2, r3
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	601a      	str	r2, [r3, #0]
			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	789b      	ldrb	r3, [r3, #2]
 800048a:	2b02      	cmp	r3, #2
 800048c:	d107      	bne.n	800049e <MCAL_GPIO_Init+0x13a>
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	68db      	ldr	r3, [r3, #12]
 8000492:	683a      	ldr	r2, [r7, #0]
 8000494:	8812      	ldrh	r2, [r2, #0]
 8000496:	431a      	orrs	r2, r3
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	60da      	str	r2, [r3, #12]
}
 800049c:	e008      	b.n	80004b0 <MCAL_GPIO_Init+0x14c>
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	68db      	ldr	r3, [r3, #12]
 80004a2:	683a      	ldr	r2, [r7, #0]
 80004a4:	8812      	ldrh	r2, [r2, #0]
 80004a6:	43d2      	mvns	r2, r2
 80004a8:	401a      	ands	r2, r3
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	60da      	str	r2, [r3, #12]
}
 80004ae:	e7ff      	b.n	80004b0 <MCAL_GPIO_Init+0x14c>
 80004b0:	bf00      	nop
 80004b2:	3714      	adds	r7, #20
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd90      	pop	{r4, r7, pc}

080004b8 <MCAL_GPIO_WritePin>:
 *
 * @retval 			-none
 * Note				-none
 */
void MCAL_GPIO_WritePin	(GPIO_TypeDef *GPIOx , uint16_t PinNumber, uint8_t Value)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	460b      	mov	r3, r1
 80004c2:	807b      	strh	r3, [r7, #2]
 80004c4:	4613      	mov	r3, r2
 80004c6:	707b      	strb	r3, [r7, #1]
	if (Value != GPIO_PIN_RESET)
 80004c8:	787b      	ldrb	r3, [r7, #1]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d003      	beq.n	80004d6 <MCAL_GPIO_WritePin+0x1e>
	{
//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = PinNumber;
 80004ce:	887a      	ldrh	r2, [r7, #2]
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	611a      	str	r2, [r3, #16]

//		or
//		GPIOx->ODR &= ~(PinNumber) ;
	}

}
 80004d4:	e002      	b.n	80004dc <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber ;
 80004d6:	887a      	ldrh	r2, [r7, #2]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	615a      	str	r2, [r3, #20]
}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr
	...

080004e8 <EXTI0_IRQHandler>:
///**===========			ISR  Functions        =========================
///**================================================================
// */

void EXTI0_IRQHandler (void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	//cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= 1<<0 ;
 80004ec:	4b05      	ldr	r3, [pc, #20]	; (8000504 <EXTI0_IRQHandler+0x1c>)
 80004ee:	695b      	ldr	r3, [r3, #20]
 80004f0:	4a04      	ldr	r2, [pc, #16]	; (8000504 <EXTI0_IRQHandler+0x1c>)
 80004f2:	f043 0301 	orr.w	r3, r3, #1
 80004f6:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[0]() ;
 80004f8:	4b03      	ldr	r3, [pc, #12]	; (8000508 <EXTI0_IRQHandler+0x20>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4798      	blx	r3
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40010400 	.word	0x40010400
 8000508:	20000028 	.word	0x20000028

0800050c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void) {
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<1) ;
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <EXTI1_IRQHandler+0x1c>)
 8000512:	695b      	ldr	r3, [r3, #20]
 8000514:	4a04      	ldr	r2, [pc, #16]	; (8000528 <EXTI1_IRQHandler+0x1c>)
 8000516:	f043 0302 	orr.w	r3, r3, #2
 800051a:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[1]() ; }
 800051c:	4b03      	ldr	r3, [pc, #12]	; (800052c <EXTI1_IRQHandler+0x20>)
 800051e:	685b      	ldr	r3, [r3, #4]
 8000520:	4798      	blx	r3
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40010400 	.word	0x40010400
 800052c:	20000028 	.word	0x20000028

08000530 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler (void) {
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<2) ;
 8000534:	4b05      	ldr	r3, [pc, #20]	; (800054c <EXTI2_IRQHandler+0x1c>)
 8000536:	695b      	ldr	r3, [r3, #20]
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <EXTI2_IRQHandler+0x1c>)
 800053a:	f043 0304 	orr.w	r3, r3, #4
 800053e:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[2]() ; }
 8000540:	4b03      	ldr	r3, [pc, #12]	; (8000550 <EXTI2_IRQHandler+0x20>)
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	4798      	blx	r3
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40010400 	.word	0x40010400
 8000550:	20000028 	.word	0x20000028

08000554 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler (void) {
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<3) ;
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <EXTI3_IRQHandler+0x1c>)
 800055a:	695b      	ldr	r3, [r3, #20]
 800055c:	4a04      	ldr	r2, [pc, #16]	; (8000570 <EXTI3_IRQHandler+0x1c>)
 800055e:	f043 0308 	orr.w	r3, r3, #8
 8000562:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[3]() ; }
 8000564:	4b03      	ldr	r3, [pc, #12]	; (8000574 <EXTI3_IRQHandler+0x20>)
 8000566:	68db      	ldr	r3, [r3, #12]
 8000568:	4798      	blx	r3
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40010400 	.word	0x40010400
 8000574:	20000028 	.word	0x20000028

08000578 <EXTI4_IRQHandler>:


void EXTI4_IRQHandler (void) {
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<4) ;
 800057c:	4b05      	ldr	r3, [pc, #20]	; (8000594 <EXTI4_IRQHandler+0x1c>)
 800057e:	695b      	ldr	r3, [r3, #20]
 8000580:	4a04      	ldr	r2, [pc, #16]	; (8000594 <EXTI4_IRQHandler+0x1c>)
 8000582:	f043 0310 	orr.w	r3, r3, #16
 8000586:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]() ; }
 8000588:	4b03      	ldr	r3, [pc, #12]	; (8000598 <EXTI4_IRQHandler+0x20>)
 800058a:	691b      	ldr	r3, [r3, #16]
 800058c:	4798      	blx	r3
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40010400 	.word	0x40010400
 8000598:	20000028 	.word	0x20000028

0800059c <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler (void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5 ) {	EXTI->PR |=  (1<<5)    ; GP_IRQ_CallBack[5]() ;   }
 80005a0:	4b26      	ldr	r3, [pc, #152]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 80005a2:	695b      	ldr	r3, [r3, #20]
 80005a4:	f003 0320 	and.w	r3, r3, #32
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d008      	beq.n	80005be <EXTI9_5_IRQHandler+0x22>
 80005ac:	4b23      	ldr	r3, [pc, #140]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 80005ae:	695b      	ldr	r3, [r3, #20]
 80005b0:	4a22      	ldr	r2, [pc, #136]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 80005b2:	f043 0320 	orr.w	r3, r3, #32
 80005b6:	6153      	str	r3, [r2, #20]
 80005b8:	4b21      	ldr	r3, [pc, #132]	; (8000640 <EXTI9_5_IRQHandler+0xa4>)
 80005ba:	695b      	ldr	r3, [r3, #20]
 80005bc:	4798      	blx	r3
	if (EXTI->PR & 1<<6 ) {	EXTI->PR |=  (1<<6)    ; GP_IRQ_CallBack[6]() ;   }
 80005be:	4b1f      	ldr	r3, [pc, #124]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d008      	beq.n	80005dc <EXTI9_5_IRQHandler+0x40>
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	4a1b      	ldr	r2, [pc, #108]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 80005d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005d4:	6153      	str	r3, [r2, #20]
 80005d6:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <EXTI9_5_IRQHandler+0xa4>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	4798      	blx	r3
	if (EXTI->PR & 1<<7 ) {	EXTI->PR |=  (1<<7)    ; GP_IRQ_CallBack[7]() ;   }
 80005dc:	4b17      	ldr	r3, [pc, #92]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d008      	beq.n	80005fa <EXTI9_5_IRQHandler+0x5e>
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	4a13      	ldr	r2, [pc, #76]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 80005ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f2:	6153      	str	r3, [r2, #20]
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <EXTI9_5_IRQHandler+0xa4>)
 80005f6:	69db      	ldr	r3, [r3, #28]
 80005f8:	4798      	blx	r3
	if (EXTI->PR & 1<<8 ) {	EXTI->PR |=  (1<<8)    ; GP_IRQ_CallBack[8]() ;   }
 80005fa:	4b10      	ldr	r3, [pc, #64]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000602:	2b00      	cmp	r3, #0
 8000604:	d008      	beq.n	8000618 <EXTI9_5_IRQHandler+0x7c>
 8000606:	4b0d      	ldr	r3, [pc, #52]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	4a0c      	ldr	r2, [pc, #48]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 800060c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000610:	6153      	str	r3, [r2, #20]
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <EXTI9_5_IRQHandler+0xa4>)
 8000614:	6a1b      	ldr	r3, [r3, #32]
 8000616:	4798      	blx	r3
	if (EXTI->PR & 1<<9 ) {	EXTI->PR |=  (1<<9)    ; GP_IRQ_CallBack[9]() ;   }
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 800061a:	695b      	ldr	r3, [r3, #20]
 800061c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000620:	2b00      	cmp	r3, #0
 8000622:	d008      	beq.n	8000636 <EXTI9_5_IRQHandler+0x9a>
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 8000626:	695b      	ldr	r3, [r3, #20]
 8000628:	4a04      	ldr	r2, [pc, #16]	; (800063c <EXTI9_5_IRQHandler+0xa0>)
 800062a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800062e:	6153      	str	r3, [r2, #20]
 8000630:	4b03      	ldr	r3, [pc, #12]	; (8000640 <EXTI9_5_IRQHandler+0xa4>)
 8000632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000634:	4798      	blx	r3

}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40010400 	.word	0x40010400
 8000640:	20000028 	.word	0x20000028

08000644 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10 ) {	EXTI->PR |=  (1<<10)    ; GP_IRQ_CallBack[10]() ;   }
 8000648:	4b2d      	ldr	r3, [pc, #180]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 800064a:	695b      	ldr	r3, [r3, #20]
 800064c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000650:	2b00      	cmp	r3, #0
 8000652:	d008      	beq.n	8000666 <EXTI15_10_IRQHandler+0x22>
 8000654:	4b2a      	ldr	r3, [pc, #168]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	4a29      	ldr	r2, [pc, #164]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 800065a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800065e:	6153      	str	r3, [r2, #20]
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <EXTI15_10_IRQHandler+0xc0>)
 8000662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000664:	4798      	blx	r3
	if (EXTI->PR & 1<<11 ) {	EXTI->PR |=  (1<<11)    ; GP_IRQ_CallBack[11]() ;   }
 8000666:	4b26      	ldr	r3, [pc, #152]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800066e:	2b00      	cmp	r3, #0
 8000670:	d008      	beq.n	8000684 <EXTI15_10_IRQHandler+0x40>
 8000672:	4b23      	ldr	r3, [pc, #140]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	4a22      	ldr	r2, [pc, #136]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 8000678:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800067c:	6153      	str	r3, [r2, #20]
 800067e:	4b21      	ldr	r3, [pc, #132]	; (8000704 <EXTI15_10_IRQHandler+0xc0>)
 8000680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000682:	4798      	blx	r3
	if (EXTI->PR & 1<<12 ) {	EXTI->PR |=  (1<<12)    ; GP_IRQ_CallBack[12]() ;   }
 8000684:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 8000686:	695b      	ldr	r3, [r3, #20]
 8000688:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800068c:	2b00      	cmp	r3, #0
 800068e:	d008      	beq.n	80006a2 <EXTI15_10_IRQHandler+0x5e>
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 8000692:	695b      	ldr	r3, [r3, #20]
 8000694:	4a1a      	ldr	r2, [pc, #104]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 8000696:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800069a:	6153      	str	r3, [r2, #20]
 800069c:	4b19      	ldr	r3, [pc, #100]	; (8000704 <EXTI15_10_IRQHandler+0xc0>)
 800069e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a0:	4798      	blx	r3
	if (EXTI->PR & 1<<13 ) {	EXTI->PR |=  (1<<13)    ; GP_IRQ_CallBack[13]() ;   }
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d008      	beq.n	80006c0 <EXTI15_10_IRQHandler+0x7c>
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	4a13      	ldr	r2, [pc, #76]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 80006b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006b8:	6153      	str	r3, [r2, #20]
 80006ba:	4b12      	ldr	r3, [pc, #72]	; (8000704 <EXTI15_10_IRQHandler+0xc0>)
 80006bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006be:	4798      	blx	r3
	if (EXTI->PR & 1<<14 ) {	EXTI->PR |=  (1<<14)    ; GP_IRQ_CallBack[14]() ;   }
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 80006c2:	695b      	ldr	r3, [r3, #20]
 80006c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d008      	beq.n	80006de <EXTI15_10_IRQHandler+0x9a>
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 80006ce:	695b      	ldr	r3, [r3, #20]
 80006d0:	4a0b      	ldr	r2, [pc, #44]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 80006d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d6:	6153      	str	r3, [r2, #20]
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <EXTI15_10_IRQHandler+0xc0>)
 80006da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006dc:	4798      	blx	r3
	if (EXTI->PR & 1<<15 ) {	EXTI->PR |=  (1<<15)    ; GP_IRQ_CallBack[15]() ;   }
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d008      	beq.n	80006fc <EXTI15_10_IRQHandler+0xb8>
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	4a04      	ldr	r2, [pc, #16]	; (8000700 <EXTI15_10_IRQHandler+0xbc>)
 80006f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006f4:	6153      	str	r3, [r2, #20]
 80006f6:	4b03      	ldr	r3, [pc, #12]	; (8000704 <EXTI15_10_IRQHandler+0xc0>)
 80006f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006fa:	4798      	blx	r3

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40010400 	.word	0x40010400
 8000704:	20000028 	.word	0x20000028

08000708 <MCAL_RCC_GetSYS_CLCKFreq>:
 * 							Generic Functions
 * =======================================================================================
 */

uint32_t MCAL_RCC_GetSYS_CLCKFreq(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
//	Set and cleared by hardware to indicate which clock source is used as system clock.
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: Not applicable
	switch  ( (RCC->CFGR  >> 2  ) & 0b11 )
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <MCAL_RCC_GetSYS_CLCKFreq+0x30>)
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	089b      	lsrs	r3, r3, #2
 8000712:	f003 0303 	and.w	r3, r3, #3
 8000716:	2b01      	cmp	r3, #1
 8000718:	d006      	beq.n	8000728 <MCAL_RCC_GetSYS_CLCKFreq+0x20>
 800071a:	2b01      	cmp	r3, #1
 800071c:	d302      	bcc.n	8000724 <MCAL_RCC_GetSYS_CLCKFreq+0x1c>
 800071e:	2b02      	cmp	r3, #2
 8000720:	d004      	beq.n	800072c <MCAL_RCC_GetSYS_CLCKFreq+0x24>
 8000722:	e005      	b.n	8000730 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
	{
	case 0:

		return HSI_RC_Clk ;
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <MCAL_RCC_GetSYS_CLCKFreq+0x34>)
 8000726:	e003      	b.n	8000730 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	case 1:

		//todo need to calculate  it //HSE User Should Specify it
		return HSE_Clock ;
 8000728:	4b05      	ldr	r3, [pc, #20]	; (8000740 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 800072a:	e001      	b.n	8000730 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	case 2:

		//todo need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000 ;
 800072c:	4b04      	ldr	r3, [pc, #16]	; (8000740 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 800072e:	e7ff      	b.n	8000730 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	}

}
 8000730:	4618      	mov	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	40021000 	.word	0x40021000
 800073c:	007a1200 	.word	0x007a1200
 8000740:	00f42400 	.word	0x00f42400

08000744 <MCAL_RCC_GetHCLKFreq>:


uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetSYS_CLCKFreq() >> AHBPrescTable[ ( (RCC->CFGR >> 4 ) & 0xF) ]  ); //the first shift is multiplication}
 8000748:	f7ff ffde 	bl	8000708 <MCAL_RCC_GetSYS_CLCKFreq>
 800074c:	4601      	mov	r1, r0
 800074e:	4b05      	ldr	r3, [pc, #20]	; (8000764 <MCAL_RCC_GetHCLKFreq+0x20>)
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	091b      	lsrs	r3, r3, #4
 8000754:	f003 030f 	and.w	r3, r3, #15
 8000758:	4a03      	ldr	r2, [pc, #12]	; (8000768 <MCAL_RCC_GetHCLKFreq+0x24>)
 800075a:	5cd3      	ldrb	r3, [r2, r3]
 800075c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000760:	4618      	mov	r0, r3
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40021000 	.word	0x40021000
 8000768:	08000e6c 	.word	0x08000e6c

0800076c <MCAL_RCC_GetPCLK1Freq>:

//APB Low speed clock (PCLK1).
//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 8 ) & 0b111) ]  ); //the first shift is multiplication
 8000770:	f7ff ffe8 	bl	8000744 <MCAL_RCC_GetHCLKFreq>
 8000774:	4601      	mov	r1, r0
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	0a1b      	lsrs	r3, r3, #8
 800077c:	f003 0307 	and.w	r3, r3, #7
 8000780:	4a03      	ldr	r2, [pc, #12]	; (8000790 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000782:	5cd3      	ldrb	r3, [r2, r3]
 8000784:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000788:	4618      	mov	r0, r3
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40021000 	.word	0x40021000
 8000790:	08000e64 	.word	0x08000e64

08000794 <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 11 ) & 0b111) ]  ); //the first shift is multiplication
 8000798:	f7ff ffd4 	bl	8000744 <MCAL_RCC_GetHCLKFreq>
 800079c:	4601      	mov	r1, r0
 800079e:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <MCAL_RCC_GetPCLK2Freq+0x20>)
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	0adb      	lsrs	r3, r3, #11
 80007a4:	f003 0307 	and.w	r3, r3, #7
 80007a8:	4a03      	ldr	r2, [pc, #12]	; (80007b8 <MCAL_RCC_GetPCLK2Freq+0x24>)
 80007aa:	5cd3      	ldrb	r3, [r2, r3]
 80007ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40021000 	.word	0x40021000
 80007b8:	08000e64 	.word	0x08000e64

080007bc <MCAL_SPI_Init>:
 * Note			 -Support for SPI Full Duplex Master/Slave & NSS HW/SW
 * 				 -In Case of Master you have to Configure pin and drive it.
 */

void MCAL_SPI_Init(SPI_TypeDef *SPIx,SPI_Config_t *SPI_Config)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
	//Safety for registers
	uint16_t tmpreg_CR1 = 0 ;
 80007c6:	2300      	movs	r3, #0
 80007c8:	81fb      	strh	r3, [r7, #14]
	uint16_t tmpreg_CR2 = 0 ;
 80007ca:	2300      	movs	r3, #0
 80007cc:	81bb      	strh	r3, [r7, #12]

	if (SPIx == SPI1)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4a3b      	ldr	r2, [pc, #236]	; (80008c0 <MCAL_SPI_Init+0x104>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d109      	bne.n	80007ea <MCAL_SPI_Init+0x2e>
	{
		Global_SPI_Config[SPI1_INDEX] = SPI_Config ;
 80007d6:	4a3b      	ldr	r2, [pc, #236]	; (80008c4 <MCAL_SPI_Init+0x108>)
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	6013      	str	r3, [r2, #0]
		RCC_SPI1_CLK_EN() ;
 80007dc:	4b3a      	ldr	r3, [pc, #232]	; (80008c8 <MCAL_SPI_Init+0x10c>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a39      	ldr	r2, [pc, #228]	; (80008c8 <MCAL_SPI_Init+0x10c>)
 80007e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	e00c      	b.n	8000804 <MCAL_SPI_Init+0x48>
	}
	else if (SPIx == SPI2)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4a37      	ldr	r2, [pc, #220]	; (80008cc <MCAL_SPI_Init+0x110>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d108      	bne.n	8000804 <MCAL_SPI_Init+0x48>
	{
		Global_SPI_Config[SPI2_INDEX] = SPI_Config ;
 80007f2:	4a34      	ldr	r2, [pc, #208]	; (80008c4 <MCAL_SPI_Init+0x108>)
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	6053      	str	r3, [r2, #4]
		RCC_SPI2_CLK_EN() ;
 80007f8:	4b33      	ldr	r3, [pc, #204]	; (80008c8 <MCAL_SPI_Init+0x10c>)
 80007fa:	69db      	ldr	r3, [r3, #28]
 80007fc:	4a32      	ldr	r2, [pc, #200]	; (80008c8 <MCAL_SPI_Init+0x10c>)
 80007fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000802:	61d3      	str	r3, [r2, #28]
	}

	//SPI_CR1. Bit 6 SPE: SPI enable
	tmpreg_CR1 = (1<<6) ;
 8000804:	2340      	movs	r3, #64	; 0x40
 8000806:	81fb      	strh	r3, [r7, #14]

	// Master or Slave
	tmpreg_CR1 |= SPI_Config->Device_Mode ;
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	881a      	ldrh	r2, [r3, #0]
 800080c:	89fb      	ldrh	r3, [r7, #14]
 800080e:	4313      	orrs	r3, r2
 8000810:	81fb      	strh	r3, [r7, #14]

	//SPI_Communication_Mode
	tmpreg_CR1 |= SPI_Config->Communication_Mode ;
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	885a      	ldrh	r2, [r3, #2]
 8000816:	89fb      	ldrh	r3, [r7, #14]
 8000818:	4313      	orrs	r3, r2
 800081a:	81fb      	strh	r3, [r7, #14]

	//SPI_Frame_Format
	tmpreg_CR1 |= SPI_Config->Frame_Format ;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	889a      	ldrh	r2, [r3, #4]
 8000820:	89fb      	ldrh	r3, [r7, #14]
 8000822:	4313      	orrs	r3, r2
 8000824:	81fb      	strh	r3, [r7, #14]

	//SPI_Data_Size
	tmpreg_CR1 |= SPI_Config->Data_Size ;
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	88da      	ldrh	r2, [r3, #6]
 800082a:	89fb      	ldrh	r3, [r7, #14]
 800082c:	4313      	orrs	r3, r2
 800082e:	81fb      	strh	r3, [r7, #14]

	//SPI_Clock_Polarity
	tmpreg_CR1 |= SPI_Config->CLK_Polarity ;
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	891a      	ldrh	r2, [r3, #8]
 8000834:	89fb      	ldrh	r3, [r7, #14]
 8000836:	4313      	orrs	r3, r2
 8000838:	81fb      	strh	r3, [r7, #14]

	//SPI_Clock_Phase
	tmpreg_CR1 |= SPI_Config->CLK_Phase ;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	895a      	ldrh	r2, [r3, #10]
 800083e:	89fb      	ldrh	r3, [r7, #14]
 8000840:	4313      	orrs	r3, r2
 8000842:	81fb      	strh	r3, [r7, #14]

	//=======================NSS=====================
	//SPI_NSS SPI Slave Select Management

	if (SPI_Config->NSS == SPI_NSS_Hard_Master_SS_Output_Enable)
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	899b      	ldrh	r3, [r3, #12]
 8000848:	2b04      	cmp	r3, #4
 800084a:	d105      	bne.n	8000858 <MCAL_SPI_Init+0x9c>
	{
		tmpreg_CR2 |= SPI_Config->NSS ;
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	899a      	ldrh	r2, [r3, #12]
 8000850:	89bb      	ldrh	r3, [r7, #12]
 8000852:	4313      	orrs	r3, r2
 8000854:	81bb      	strh	r3, [r7, #12]
 8000856:	e004      	b.n	8000862 <MCAL_SPI_Init+0xa6>
	{
		tmpreg_CR2 &= SPI_Config->NSS ;
	}
	else
	{
		tmpreg_CR1 |= SPI_Config->NSS ;
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	899a      	ldrh	r2, [r3, #12]
 800085c:	89fb      	ldrh	r3, [r7, #14]
 800085e:	4313      	orrs	r3, r2
 8000860:	81fb      	strh	r3, [r7, #14]
	}

	//===============================================
	//SPI_BaudRatePrescaler
	tmpreg_CR1 |= SPI_Config->SPI_BAUDRATEPRESCALER ;
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	89da      	ldrh	r2, [r3, #14]
 8000866:	89fb      	ldrh	r3, [r7, #14]
 8000868:	4313      	orrs	r3, r2
 800086a:	81fb      	strh	r3, [r7, #14]

	if(SPI_Config->IRQ_Enable != SPI_IRQ_Enable_NONE )
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	8a1b      	ldrh	r3, [r3, #16]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d019      	beq.n	80008a8 <MCAL_SPI_Init+0xec>
	{
		// SPI_IRQ_Enable_define
		tmpreg_CR2 |= SPI_Config->IRQ_Enable ;
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	8a1a      	ldrh	r2, [r3, #16]
 8000878:	89bb      	ldrh	r3, [r7, #12]
 800087a:	4313      	orrs	r3, r2
 800087c:	81bb      	strh	r3, [r7, #12]
		if (SPIx == SPI1)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4a0f      	ldr	r2, [pc, #60]	; (80008c0 <MCAL_SPI_Init+0x104>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d106      	bne.n	8000894 <MCAL_SPI_Init+0xd8>
		{
			NVIC_IRQ35_SPI1_Enable();
 8000886:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MCAL_SPI_Init+0x114>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a11      	ldr	r2, [pc, #68]	; (80008d0 <MCAL_SPI_Init+0x114>)
 800088c:	f043 0308 	orr.w	r3, r3, #8
 8000890:	6013      	str	r3, [r2, #0]
 8000892:	e009      	b.n	80008a8 <MCAL_SPI_Init+0xec>
		}
		else if (SPIx == SPI2)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4a0d      	ldr	r2, [pc, #52]	; (80008cc <MCAL_SPI_Init+0x110>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d105      	bne.n	80008a8 <MCAL_SPI_Init+0xec>
		{
			NVIC_IRQ36_SPI2_Enable();
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MCAL_SPI_Init+0x114>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a0b      	ldr	r2, [pc, #44]	; (80008d0 <MCAL_SPI_Init+0x114>)
 80008a2:	f043 0310 	orr.w	r3, r3, #16
 80008a6:	6013      	str	r3, [r2, #0]
		}
	}

	SPIx->SPI_CR1 = tmpreg_CR1 ;
 80008a8:	89fa      	ldrh	r2, [r7, #14]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	601a      	str	r2, [r3, #0]
	SPIx->SPI_CR2 = tmpreg_CR2 ;
 80008ae:	89ba      	ldrh	r2, [r7, #12]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	605a      	str	r2, [r3, #4]

}
 80008b4:	bf00      	nop
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	80013000 	.word	0x80013000
 80008c4:	2000001c 	.word	0x2000001c
 80008c8:	40021000 	.word	0x40021000
 80008cc:	80003800 	.word	0x80003800
 80008d0:	e000e104 	.word	0xe000e104

080008d4 <MCAL_SPI_GPIO_Set_Pins>:
 * @retval 				- None
 * Note					- None
 */

void MCAL_SPI_GPIO_Set_Pins(SPI_TypeDef *SPIx)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PIN_Cfg;


	if(SPIx == SPI1){
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a73      	ldr	r2, [pc, #460]	; (8000aac <MCAL_SPI_GPIO_Set_Pins+0x1d8>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d169      	bne.n	80009b8 <MCAL_SPI_GPIO_Set_Pins+0xe4>
		// PA4 : NSS
		if(Global_SPI_Config[SPI1_INDEX]->Device_Mode == SPI_Device_Mode_MASTER)
 80008e4:	4b72      	ldr	r3, [pc, #456]	; (8000ab0 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	881b      	ldrh	r3, [r3, #0]
 80008ea:	2b04      	cmp	r3, #4
 80008ec:	d134      	bne.n	8000958 <MCAL_SPI_GPIO_Set_Pins+0x84>
		{

			switch(Global_SPI_Config[SPI1_INDEX]->NSS)
 80008ee:	4b70      	ldr	r3, [pc, #448]	; (8000ab0 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	899b      	ldrh	r3, [r3, #12]
 80008f4:	2b04      	cmp	r3, #4
 80008f6:	d10c      	bne.n	8000912 <MCAL_SPI_GPIO_Set_Pins+0x3e>
				MCAL_GPIO_Init(GPIOA, &PIN_Cfg);
				break;

			case SPI_NSS_Hard_Master_SS_Output_Enable:
				// Hardware master/ NSS output enabled Alternate function push-pull
				PIN_Cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80008f8:	2306      	movs	r3, #6
 80008fa:	75bb      	strb	r3, [r7, #22]
				PIN_Cfg.GPIO_PinNumber = GPIO_PIN_4;
 80008fc:	2310      	movs	r3, #16
 80008fe:	82bb      	strh	r3, [r7, #20]
				PIN_Cfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000900:	2301      	movs	r3, #1
 8000902:	75fb      	strb	r3, [r7, #23]
				MCAL_GPIO_Init(GPIOA, &PIN_Cfg);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	486a      	ldr	r0, [pc, #424]	; (8000ab4 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 800090c:	f7ff fd2a 	bl	8000364 <MCAL_GPIO_Init>
				break;
 8000910:	bf00      	nop
			}

			// PA5 : SCK
			// Master Alternate function push-pull
			PIN_Cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000912:	2306      	movs	r3, #6
 8000914:	75bb      	strb	r3, [r7, #22]
			PIN_Cfg.GPIO_PinNumber = GPIO_PIN_5;
 8000916:	2320      	movs	r3, #32
 8000918:	82bb      	strh	r3, [r7, #20]
			PIN_Cfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800091a:	2301      	movs	r3, #1
 800091c:	75fb      	strb	r3, [r7, #23]
			MCAL_GPIO_Init(GPIOA, &PIN_Cfg);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4619      	mov	r1, r3
 8000924:	4863      	ldr	r0, [pc, #396]	; (8000ab4 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000926:	f7ff fd1d 	bl	8000364 <MCAL_GPIO_Init>


			// PA6 : MISO
			// Full duplex / master Input floating
			PIN_Cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800092a:	2301      	movs	r3, #1
 800092c:	75bb      	strb	r3, [r7, #22]
			PIN_Cfg.GPIO_PinNumber = GPIO_PIN_6;
 800092e:	2340      	movs	r3, #64	; 0x40
 8000930:	82bb      	strh	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOA, &PIN_Cfg);
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4619      	mov	r1, r3
 8000938:	485e      	ldr	r0, [pc, #376]	; (8000ab4 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 800093a:	f7ff fd13 	bl	8000364 <MCAL_GPIO_Init>

			// PA7 : MOSI
			// Full duplex / master Alternate function push-pull
			PIN_Cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800093e:	2306      	movs	r3, #6
 8000940:	75bb      	strb	r3, [r7, #22]
			PIN_Cfg.GPIO_PinNumber = GPIO_PIN_7;
 8000942:	2380      	movs	r3, #128	; 0x80
 8000944:	82bb      	strh	r3, [r7, #20]
			PIN_Cfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000946:	2301      	movs	r3, #1
 8000948:	75fb      	strb	r3, [r7, #23]
			MCAL_GPIO_Init(GPIOA, &PIN_Cfg);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	4858      	ldr	r0, [pc, #352]	; (8000ab4 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000952:	f7ff fd07 	bl	8000364 <MCAL_GPIO_Init>
			MCAL_GPIO_Init(GPIOB, &PIN_Cfg);

		}

	}
}
 8000956:	e0a4      	b.n	8000aa2 <MCAL_SPI_GPIO_Set_Pins+0x1ce>
			if(Global_SPI_Config[SPI1_INDEX]->NSS == SPI_Device_Mode_SLAVE)
 8000958:	4b55      	ldr	r3, [pc, #340]	; (8000ab0 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	899b      	ldrh	r3, [r3, #12]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d109      	bne.n	8000976 <MCAL_SPI_GPIO_Set_Pins+0xa2>
				PIN_Cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000962:	2301      	movs	r3, #1
 8000964:	75bb      	strb	r3, [r7, #22]
				PIN_Cfg.GPIO_PinNumber = GPIO_PIN_4;
 8000966:	2310      	movs	r3, #16
 8000968:	82bb      	strh	r3, [r7, #20]
				MCAL_GPIO_Init(GPIOA, &PIN_Cfg);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	4850      	ldr	r0, [pc, #320]	; (8000ab4 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000972:	f7ff fcf7 	bl	8000364 <MCAL_GPIO_Init>
			PIN_Cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000976:	2301      	movs	r3, #1
 8000978:	75bb      	strb	r3, [r7, #22]
			PIN_Cfg.GPIO_PinNumber = GPIO_PIN_5;
 800097a:	2320      	movs	r3, #32
 800097c:	82bb      	strh	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOA, &PIN_Cfg);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	484b      	ldr	r0, [pc, #300]	; (8000ab4 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000986:	f7ff fced 	bl	8000364 <MCAL_GPIO_Init>
			PIN_Cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800098a:	2306      	movs	r3, #6
 800098c:	75bb      	strb	r3, [r7, #22]
			PIN_Cfg.GPIO_PinNumber = GPIO_PIN_6;
 800098e:	2340      	movs	r3, #64	; 0x40
 8000990:	82bb      	strh	r3, [r7, #20]
			PIN_Cfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000992:	2301      	movs	r3, #1
 8000994:	75fb      	strb	r3, [r7, #23]
			MCAL_GPIO_Init(GPIOA, &PIN_Cfg);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	4845      	ldr	r0, [pc, #276]	; (8000ab4 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 800099e:	f7ff fce1 	bl	8000364 <MCAL_GPIO_Init>
			PIN_Cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80009a2:	2301      	movs	r3, #1
 80009a4:	74bb      	strb	r3, [r7, #18]
			PIN_Cfg.GPIO_PinNumber = GPIO_PIN_7;
 80009a6:	2380      	movs	r3, #128	; 0x80
 80009a8:	823b      	strh	r3, [r7, #16]
			MCAL_GPIO_Init(GPIOA, &PIN_Cfg);
 80009aa:	f107 0310 	add.w	r3, r7, #16
 80009ae:	4619      	mov	r1, r3
 80009b0:	4840      	ldr	r0, [pc, #256]	; (8000ab4 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80009b2:	f7ff fcd7 	bl	8000364 <MCAL_GPIO_Init>
}
 80009b6:	e074      	b.n	8000aa2 <MCAL_SPI_GPIO_Set_Pins+0x1ce>
	else if(SPIx == SPI2)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a3f      	ldr	r2, [pc, #252]	; (8000ab8 <MCAL_SPI_GPIO_Set_Pins+0x1e4>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d170      	bne.n	8000aa2 <MCAL_SPI_GPIO_Set_Pins+0x1ce>
		if(Global_SPI_Config[SPI2_INDEX]->Device_Mode == SPI_Device_Mode_MASTER)
 80009c0:	4b3b      	ldr	r3, [pc, #236]	; (8000ab0 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	2b04      	cmp	r3, #4
 80009c8:	d138      	bne.n	8000a3c <MCAL_SPI_GPIO_Set_Pins+0x168>
			switch(Global_SPI_Config[SPI1_INDEX]->NSS)
 80009ca:	4b39      	ldr	r3, [pc, #228]	; (8000ab0 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	899b      	ldrh	r3, [r3, #12]
 80009d0:	2b04      	cmp	r3, #4
 80009d2:	d10d      	bne.n	80009f0 <MCAL_SPI_GPIO_Set_Pins+0x11c>
				PIN_Cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80009d4:	2306      	movs	r3, #6
 80009d6:	75bb      	strb	r3, [r7, #22]
				PIN_Cfg.GPIO_PinNumber = GPIO_PIN_12;
 80009d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009dc:	82bb      	strh	r3, [r7, #20]
				PIN_Cfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80009de:	2301      	movs	r3, #1
 80009e0:	75fb      	strb	r3, [r7, #23]
				MCAL_GPIO_Init(GPIOB, &PIN_Cfg);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	4834      	ldr	r0, [pc, #208]	; (8000abc <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 80009ea:	f7ff fcbb 	bl	8000364 <MCAL_GPIO_Init>
				break;
 80009ee:	bf00      	nop
			PIN_Cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80009f0:	2306      	movs	r3, #6
 80009f2:	75bb      	strb	r3, [r7, #22]
			PIN_Cfg.GPIO_PinNumber = GPIO_PIN_13;
 80009f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f8:	82bb      	strh	r3, [r7, #20]
			PIN_Cfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80009fa:	2301      	movs	r3, #1
 80009fc:	75fb      	strb	r3, [r7, #23]
			MCAL_GPIO_Init(GPIOB, &PIN_Cfg);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	482d      	ldr	r0, [pc, #180]	; (8000abc <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000a06:	f7ff fcad 	bl	8000364 <MCAL_GPIO_Init>
			PIN_Cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	75bb      	strb	r3, [r7, #22]
			PIN_Cfg.GPIO_PinNumber = GPIO_PIN_14;
 8000a0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a12:	82bb      	strh	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOB, &PIN_Cfg);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4828      	ldr	r0, [pc, #160]	; (8000abc <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000a1c:	f7ff fca2 	bl	8000364 <MCAL_GPIO_Init>
			PIN_Cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000a20:	2306      	movs	r3, #6
 8000a22:	75bb      	strb	r3, [r7, #22]
			PIN_Cfg.GPIO_PinNumber = GPIO_PIN_15;
 8000a24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a28:	82bb      	strh	r3, [r7, #20]
			PIN_Cfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	75fb      	strb	r3, [r7, #23]
			MCAL_GPIO_Init(GPIOB, &PIN_Cfg);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	4821      	ldr	r0, [pc, #132]	; (8000abc <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000a36:	f7ff fc95 	bl	8000364 <MCAL_GPIO_Init>
}
 8000a3a:	e032      	b.n	8000aa2 <MCAL_SPI_GPIO_Set_Pins+0x1ce>
			if(Global_SPI_Config[SPI1_INDEX]->NSS == SPI_Device_Mode_SLAVE)
 8000a3c:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	899b      	ldrh	r3, [r3, #12]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d10a      	bne.n	8000a5c <MCAL_SPI_GPIO_Set_Pins+0x188>
				PIN_Cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000a46:	2301      	movs	r3, #1
 8000a48:	75bb      	strb	r3, [r7, #22]
				PIN_Cfg.GPIO_PinNumber = GPIO_PIN_12;
 8000a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4e:	82bb      	strh	r3, [r7, #20]
				MCAL_GPIO_Init(GPIOB, &PIN_Cfg);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	4819      	ldr	r0, [pc, #100]	; (8000abc <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000a58:	f7ff fc84 	bl	8000364 <MCAL_GPIO_Init>
			PIN_Cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	75bb      	strb	r3, [r7, #22]
			PIN_Cfg.GPIO_PinNumber = GPIO_PIN_13;
 8000a60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a64:	82bb      	strh	r3, [r7, #20]
			MCAL_GPIO_Init(GPIOB, &PIN_Cfg);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4813      	ldr	r0, [pc, #76]	; (8000abc <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000a6e:	f7ff fc79 	bl	8000364 <MCAL_GPIO_Init>
			PIN_Cfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000a72:	2306      	movs	r3, #6
 8000a74:	75bb      	strb	r3, [r7, #22]
			PIN_Cfg.GPIO_PinNumber = GPIO_PIN_14;
 8000a76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a7a:	82bb      	strh	r3, [r7, #20]
			PIN_Cfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	75fb      	strb	r3, [r7, #23]
			MCAL_GPIO_Init(GPIOB, &PIN_Cfg);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	480d      	ldr	r0, [pc, #52]	; (8000abc <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000a88:	f7ff fc6c 	bl	8000364 <MCAL_GPIO_Init>
			PIN_Cfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	73bb      	strb	r3, [r7, #14]
			PIN_Cfg.GPIO_PinNumber = GPIO_PIN_15;
 8000a90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a94:	81bb      	strh	r3, [r7, #12]
			MCAL_GPIO_Init(GPIOB, &PIN_Cfg);
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4807      	ldr	r0, [pc, #28]	; (8000abc <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8000a9e:	f7ff fc61 	bl	8000364 <MCAL_GPIO_Init>
}
 8000aa2:	bf00      	nop
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	80013000 	.word	0x80013000
 8000ab0:	2000001c 	.word	0x2000001c
 8000ab4:	40010800 	.word	0x40010800
 8000ab8:	80003800 	.word	0x80003800
 8000abc:	40010c00 	.word	0x40010c00

08000ac0 <SPI1_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void SPI1_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;

	irq_src.TXE  = ( ( SPI1->SPI_SR  & (1<<1)) >> 1 ) ;
 8000ac6:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <SPI1_IRQHandler+0x54>)
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	085b      	lsrs	r3, r3, #1
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	793b      	ldrb	r3, [r7, #4]
 8000ad4:	f362 0300 	bfi	r3, r2, #0, #1
 8000ad8:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SPI_SR  & (1<<0)) >> 0 ) ;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <SPI1_IRQHandler+0x54>)
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	793b      	ldrb	r3, [r7, #4]
 8000ae6:	f362 0341 	bfi	r3, r2, #1, #1
 8000aea:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SPI_SR  & (1<<4)) >> 4 ) ;
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <SPI1_IRQHandler+0x54>)
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	091b      	lsrs	r3, r3, #4
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	793b      	ldrb	r3, [r7, #4]
 8000afa:	f362 0382 	bfi	r3, r2, #2, #1
 8000afe:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(irq_src);
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <SPI1_IRQHandler+0x58>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	695b      	ldr	r3, [r3, #20]
 8000b06:	7938      	ldrb	r0, [r7, #4]
 8000b08:	4798      	blx	r3
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	80013000 	.word	0x80013000
 8000b18:	2000001c 	.word	0x2000001c

08000b1c <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;

	irq_src.TXE  = ( ( SPI1->SPI_SR  & (1<<1)) >> 1 ) ;
 8000b22:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <SPI2_IRQHandler+0x54>)
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	085b      	lsrs	r3, r3, #1
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	793b      	ldrb	r3, [r7, #4]
 8000b30:	f362 0300 	bfi	r3, r2, #0, #1
 8000b34:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SPI_SR  & (1<<0)) >> 0 ) ;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <SPI2_IRQHandler+0x54>)
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	793b      	ldrb	r3, [r7, #4]
 8000b42:	f362 0341 	bfi	r3, r2, #1, #1
 8000b46:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SPI_SR  & (1<<4)) >> 4 ) ;
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <SPI2_IRQHandler+0x54>)
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	091b      	lsrs	r3, r3, #4
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	793b      	ldrb	r3, [r7, #4]
 8000b56:	f362 0382 	bfi	r3, r2, #2, #1
 8000b5a:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(irq_src);
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <SPI2_IRQHandler+0x58>)
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	7938      	ldrb	r0, [r7, #4]
 8000b64:	4798      	blx	r3
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	80013000 	.word	0x80013000
 8000b74:	2000001c 	.word	0x2000001c

08000b78 <MCAL_UART_Init>:
 * @param [in] 		- UART_Config: All UART Configuration EXTI_PinConfig_t
 * @retval 			-none
 * Note				-Support for Now Asynch mode & Clock 8 MHZ S
 */
void MCAL_UART_Init (USART_TypeDef *USARTx, UART_Config* UART_Config)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
	Global_UART_Config = UART_Config ;
 8000b82:	4a57      	ldr	r2, [pc, #348]	; (8000ce0 <MCAL_UART_Init+0x168>)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	6013      	str	r3, [r2, #0]
	uint32_t pclk ,BRR  ;
	//	enable the Clock for given USART peripheral

	if ( USARTx == USART1 )
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a56      	ldr	r2, [pc, #344]	; (8000ce4 <MCAL_UART_Init+0x16c>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d106      	bne.n	8000b9e <MCAL_UART_Init+0x26>
		RCC_USART1_CLK_EN();
 8000b90:	4b55      	ldr	r3, [pc, #340]	; (8000ce8 <MCAL_UART_Init+0x170>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a54      	ldr	r2, [pc, #336]	; (8000ce8 <MCAL_UART_Init+0x170>)
 8000b96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	e014      	b.n	8000bc8 <MCAL_UART_Init+0x50>

	else if ( USARTx == USART2 )
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a52      	ldr	r2, [pc, #328]	; (8000cec <MCAL_UART_Init+0x174>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d106      	bne.n	8000bb4 <MCAL_UART_Init+0x3c>
		RCC_USART2_CLK_EN();
 8000ba6:	4b50      	ldr	r3, [pc, #320]	; (8000ce8 <MCAL_UART_Init+0x170>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	4a4f      	ldr	r2, [pc, #316]	; (8000ce8 <MCAL_UART_Init+0x170>)
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb0:	61d3      	str	r3, [r2, #28]
 8000bb2:	e009      	b.n	8000bc8 <MCAL_UART_Init+0x50>

	else if ( USARTx == USART3 )
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a4e      	ldr	r2, [pc, #312]	; (8000cf0 <MCAL_UART_Init+0x178>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d105      	bne.n	8000bc8 <MCAL_UART_Init+0x50>
		RCC_USART3_CLK_EN();
 8000bbc:	4b4a      	ldr	r3, [pc, #296]	; (8000ce8 <MCAL_UART_Init+0x170>)
 8000bbe:	69db      	ldr	r3, [r3, #28]
 8000bc0:	4a49      	ldr	r2, [pc, #292]	; (8000ce8 <MCAL_UART_Init+0x170>)
 8000bc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bc6:	61d3      	str	r3, [r2, #28]



	//Enable USART Module
	//	USART_CR1  Bit 13 UE: USART enable
	USARTx->CR1 |= 1<<13 ;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	60da      	str	r2, [r3, #12]

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	//	USART_CR1 Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable
	USARTx->CR1 |= UART_Config->USART_Mode ;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	7812      	ldrb	r2, [r2, #0]
 8000bdc:	431a      	orrs	r2, r3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	60da      	str	r2, [r3, #12]

	//PAYLOAD Width
	// USARTx->CR1  Bit 12 M: Word length
	USARTx->CR1 |= UART_Config->Payload_Length ;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	68db      	ldr	r3, [r3, #12]
 8000be6:	683a      	ldr	r2, [r7, #0]
 8000be8:	7a12      	ldrb	r2, [r2, #8]
 8000bea:	431a      	orrs	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	60da      	str	r2, [r3, #12]

	//Configuration of parity control bit fields
	// USARTx->CR1 	Bit 10 PCE: Parity control enable     Bit 9 PS: Parity selection
	USARTx->CR1 |= UART_Config->Parity ;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	683a      	ldr	r2, [r7, #0]
 8000bf6:	7a52      	ldrb	r2, [r2, #9]
 8000bf8:	431a      	orrs	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	60da      	str	r2, [r3, #12]

	//configure the number of stop bits
	//USART_CR2  Bits 13:12 STOP: STOP bits
	USARTx->CR2 |= UART_Config->StopBits ;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	691b      	ldr	r3, [r3, #16]
 8000c02:	683a      	ldr	r2, [r7, #0]
 8000c04:	7a92      	ldrb	r2, [r2, #10]
 8000c06:	431a      	orrs	r2, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	611a      	str	r2, [r3, #16]


	//USART hardware flow control
	//USART_CR3  Bit 9 CTSE: CTS enable   Bit 8 RTSE: RTS enable
	USARTx->CR3 |= UART_Config->HwFlowCtl ;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	695b      	ldr	r3, [r3, #20]
 8000c10:	683a      	ldr	r2, [r7, #0]
 8000c12:	7ad2      	ldrb	r2, [r2, #11]
 8000c14:	431a      	orrs	r2, r3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	615a      	str	r2, [r3, #20]


	//Configuration of BRR(Baudrate register)
	//PCLK1 for USART2, 3
	//PCLK2 for USART1
	if ( USARTx == USART1 )
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a31      	ldr	r2, [pc, #196]	; (8000ce4 <MCAL_UART_Init+0x16c>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d103      	bne.n	8000c2a <MCAL_UART_Init+0xb2>
	{
		pclk = MCAL_RCC_GetPCLK2Freq();
 8000c22:	f7ff fdb7 	bl	8000794 <MCAL_RCC_GetPCLK2Freq>
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	e002      	b.n	8000c30 <MCAL_UART_Init+0xb8>
	}
	else
	{
		pclk = MCAL_RCC_GetPCLK1Freq();
 8000c2a:	f7ff fd9f 	bl	800076c <MCAL_RCC_GetPCLK1Freq>
 8000c2e:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register(pclk, UART_Config->BaudRate) ;
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	011b      	lsls	r3, r3, #4
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3c:	0119      	lsls	r1, r3, #4
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	4613      	mov	r3, r2
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	4413      	add	r3, r2
 8000c46:	009a      	lsls	r2, r3, #2
 8000c48:	441a      	add	r2, r3
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	011b      	lsls	r3, r3, #4
 8000c5a:	68f8      	ldr	r0, [r7, #12]
 8000c5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c60:	2064      	movs	r0, #100	; 0x64
 8000c62:	fb00 f303 	mul.w	r3, r0, r3
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	011b      	lsls	r3, r3, #4
 8000c6a:	4a22      	ldr	r2, [pc, #136]	; (8000cf4 <MCAL_UART_Init+0x17c>)
 8000c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c70:	095b      	lsrs	r3, r3, #5
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	430b      	orrs	r3, r1
 8000c78:	60bb      	str	r3, [r7, #8]

	USARTx->BRR = BRR ;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	68ba      	ldr	r2, [r7, #8]
 8000c7e:	609a      	str	r2, [r3, #8]


	//ENABLE / DISABLE Interrupt
	//USART_CR1
	if (UART_Config->IRQ_Enable  != UART_IRQ_Enable_NONE)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	7b1b      	ldrb	r3, [r3, #12]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d026      	beq.n	8000cd6 <MCAL_UART_Init+0x15e>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable) ;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	683a      	ldr	r2, [r7, #0]
 8000c8e:	7b12      	ldrb	r2, [r2, #12]
 8000c90:	431a      	orrs	r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	60da      	str	r2, [r3, #12]
		//		Enable NVIC For USARTx IRQ
		if ( USARTx == USART1 )
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <MCAL_UART_Init+0x16c>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d106      	bne.n	8000cac <MCAL_UART_Init+0x134>
			NVIC_IRQ37_USART1_Enable ;
 8000c9e:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <MCAL_UART_Init+0x180>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a15      	ldr	r2, [pc, #84]	; (8000cf8 <MCAL_UART_Init+0x180>)
 8000ca4:	f043 0320 	orr.w	r3, r3, #32
 8000ca8:	6013      	str	r3, [r2, #0]

		else if ( USARTx == USART3 )
			NVIC_IRQ39_USART3_Enable ;
	}

}
 8000caa:	e014      	b.n	8000cd6 <MCAL_UART_Init+0x15e>
		else if ( USARTx == USART2 )
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a0f      	ldr	r2, [pc, #60]	; (8000cec <MCAL_UART_Init+0x174>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d106      	bne.n	8000cc2 <MCAL_UART_Init+0x14a>
			NVIC_IRQ38_USART2_Enable ;
 8000cb4:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <MCAL_UART_Init+0x180>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0f      	ldr	r2, [pc, #60]	; (8000cf8 <MCAL_UART_Init+0x180>)
 8000cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cbe:	6013      	str	r3, [r2, #0]
}
 8000cc0:	e009      	b.n	8000cd6 <MCAL_UART_Init+0x15e>
		else if ( USARTx == USART3 )
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <MCAL_UART_Init+0x178>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d105      	bne.n	8000cd6 <MCAL_UART_Init+0x15e>
			NVIC_IRQ39_USART3_Enable ;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <MCAL_UART_Init+0x180>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <MCAL_UART_Init+0x180>)
 8000cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd4:	6013      	str	r3, [r2, #0]
}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000024 	.word	0x20000024
 8000ce4:	40013800 	.word	0x40013800
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40004400 	.word	0x40004400
 8000cf0:	40004800 	.word	0x40004800
 8000cf4:	51eb851f 	.word	0x51eb851f
 8000cf8:	e000e104 	.word	0xe000e104

08000cfc <MCAL_UART_GPIO_Set_Pins>:
 * @param [in] 		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			-none
 * Note				-Should enable the corresponding ALT  & GPIO  in RCC clock Also called after MCAL_UART_Init()
 */
void MCAL_UART_GPIO_Set_Pins (USART_TypeDef *USARTx)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg ;

	if ( USARTx == USART1 )
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a2b      	ldr	r2, [pc, #172]	; (8000db4 <MCAL_UART_GPIO_Set_Pins+0xb8>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d118      	bne.n	8000d3e <MCAL_UART_GPIO_Set_Pins+0x42>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//PA9 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8000d0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d10:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000d12:	2306      	movs	r3, #6
 8000d14:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000d16:	2301      	movs	r3, #1
 8000d18:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000d1a:	f107 030c 	add.w	r3, r7, #12
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4825      	ldr	r0, [pc, #148]	; (8000db8 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000d22:	f7ff fb1f 	bl	8000364 <MCAL_GPIO_Init>

		//PA10 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d2a:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000d30:	f107 030c 	add.w	r3, r7, #12
 8000d34:	4619      	mov	r1, r3
 8000d36:	4820      	ldr	r0, [pc, #128]	; (8000db8 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000d38:	f7ff fb14 	bl	8000364 <MCAL_GPIO_Init>
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &PinCfg);

		}
	}
}
 8000d3c:	e036      	b.n	8000dac <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if ( USARTx == USART2 )
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a1e      	ldr	r2, [pc, #120]	; (8000dbc <MCAL_UART_GPIO_Set_Pins+0xc0>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d116      	bne.n	8000d74 <MCAL_UART_GPIO_Set_Pins+0x78>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000d46:	2304      	movs	r3, #4
 8000d48:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000d4a:	2306      	movs	r3, #6
 8000d4c:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000d52:	f107 030c 	add.w	r3, r7, #12
 8000d56:	4619      	mov	r1, r3
 8000d58:	4817      	ldr	r0, [pc, #92]	; (8000db8 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000d5a:	f7ff fb03 	bl	8000364 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000d5e:	2308      	movs	r3, #8
 8000d60:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000d62:	2308      	movs	r3, #8
 8000d64:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000d66:	f107 030c 	add.w	r3, r7, #12
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4812      	ldr	r0, [pc, #72]	; (8000db8 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000d6e:	f7ff faf9 	bl	8000364 <MCAL_GPIO_Init>
}
 8000d72:	e01b      	b.n	8000dac <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if ( USARTx == USART3 )
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <MCAL_UART_GPIO_Set_Pins+0xc4>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d117      	bne.n	8000dac <MCAL_UART_GPIO_Set_Pins+0xb0>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d80:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000d82:	2306      	movs	r3, #6
 8000d84:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000d86:	2301      	movs	r3, #1
 8000d88:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000d8a:	f107 030c 	add.w	r3, r7, #12
 8000d8e:	4619      	mov	r1, r3
 8000d90:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000d92:	f7ff fae7 	bl	8000364 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000d96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d9a:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000d9c:	2308      	movs	r3, #8
 8000d9e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	4619      	mov	r1, r3
 8000da6:	4807      	ldr	r0, [pc, #28]	; (8000dc4 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000da8:	f7ff fadc 	bl	8000364 <MCAL_GPIO_Init>
}
 8000dac:	bf00      	nop
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40013800 	.word	0x40013800
 8000db8:	40010800 	.word	0x40010800
 8000dbc:	40004400 	.word	0x40004400
 8000dc0:	40004800 	.word	0x40004800
 8000dc4:	40010c00 	.word	0x40010c00

08000dc8 <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler (void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0

	Global_UART_Config->P_IRQ_CallBack () ;
 8000dcc:	4b02      	ldr	r3, [pc, #8]	; (8000dd8 <USART1_IRQHandler+0x10>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	691b      	ldr	r3, [r3, #16]
 8000dd2:	4798      	blx	r3

}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000024 	.word	0x20000024

08000ddc <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 8000de0:	4b02      	ldr	r3, [pc, #8]	; (8000dec <USART2_IRQHandler+0x10>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	691b      	ldr	r3, [r3, #16]
 8000de6:	4798      	blx	r3

}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000024 	.word	0x20000024

08000df0 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 8000df4:	4b02      	ldr	r3, [pc, #8]	; (8000e00 <USART3_IRQHandler+0x10>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	691b      	ldr	r3, [r3, #16]
 8000dfa:	4798      	blx	r3


}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000024 	.word	0x20000024

08000e04 <__libc_init_array>:
 8000e04:	b570      	push	{r4, r5, r6, lr}
 8000e06:	2500      	movs	r5, #0
 8000e08:	4e0c      	ldr	r6, [pc, #48]	; (8000e3c <__libc_init_array+0x38>)
 8000e0a:	4c0d      	ldr	r4, [pc, #52]	; (8000e40 <__libc_init_array+0x3c>)
 8000e0c:	1ba4      	subs	r4, r4, r6
 8000e0e:	10a4      	asrs	r4, r4, #2
 8000e10:	42a5      	cmp	r5, r4
 8000e12:	d109      	bne.n	8000e28 <__libc_init_array+0x24>
 8000e14:	f000 f81a 	bl	8000e4c <_init>
 8000e18:	2500      	movs	r5, #0
 8000e1a:	4e0a      	ldr	r6, [pc, #40]	; (8000e44 <__libc_init_array+0x40>)
 8000e1c:	4c0a      	ldr	r4, [pc, #40]	; (8000e48 <__libc_init_array+0x44>)
 8000e1e:	1ba4      	subs	r4, r4, r6
 8000e20:	10a4      	asrs	r4, r4, #2
 8000e22:	42a5      	cmp	r5, r4
 8000e24:	d105      	bne.n	8000e32 <__libc_init_array+0x2e>
 8000e26:	bd70      	pop	{r4, r5, r6, pc}
 8000e28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e2c:	4798      	blx	r3
 8000e2e:	3501      	adds	r5, #1
 8000e30:	e7ee      	b.n	8000e10 <__libc_init_array+0xc>
 8000e32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e36:	4798      	blx	r3
 8000e38:	3501      	adds	r5, #1
 8000e3a:	e7f2      	b.n	8000e22 <__libc_init_array+0x1e>
 8000e3c:	08000e7c 	.word	0x08000e7c
 8000e40:	08000e7c 	.word	0x08000e7c
 8000e44:	08000e7c 	.word	0x08000e7c
 8000e48:	08000e80 	.word	0x08000e80

08000e4c <_init>:
 8000e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e4e:	bf00      	nop
 8000e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e52:	bc08      	pop	{r3}
 8000e54:	469e      	mov	lr, r3
 8000e56:	4770      	bx	lr

08000e58 <_fini>:
 8000e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e5a:	bf00      	nop
 8000e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e5e:	bc08      	pop	{r3}
 8000e60:	469e      	mov	lr, r3
 8000e62:	4770      	bx	lr
