
Task3_Unit7_Lesson1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000062e  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059a  00000000  00000000  00000806  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000258  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000331  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000088  00000000  00000000  0000134d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 79 00 	jmp	0xf2	; 0xf2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

//static unsigned char SegmentNumber[]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
	
int main(void)
{	int flag=7;
	DDRD = 0b11111000;
  6c:	88 ef       	ldi	r24, 0xF8	; 248
  6e:	81 bb       	out	0x11, r24	; 17


//static unsigned char SegmentNumber[]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
	
int main(void)
{	int flag=7;
  70:	87 e0       	ldi	r24, 0x07	; 7
  72:	90 e0       	ldi	r25, 0x00	; 0
	DDRD = 0b11111000;
    /* Replace with your application code */
    while (1) 
    {
		
		if(ReadBit(PIND,0)==1)
  74:	80 9b       	sbis	0x10, 0	; 16
  76:	33 c0       	rjmp	.+102    	; 0xde <main+0x72>
		{
			if (flag>4)
  78:	85 30       	cpi	r24, 0x05	; 5
  7a:	91 05       	cpc	r25, r1
  7c:	6c f0       	brlt	.+26     	; 0x98 <main+0x2c>
			{
			SetBit(PORTD,flag);
  7e:	42 b3       	in	r20, 0x12	; 18
  80:	21 e0       	ldi	r18, 0x01	; 1
  82:	30 e0       	ldi	r19, 0x00	; 0
  84:	08 2e       	mov	r0, r24
  86:	02 c0       	rjmp	.+4      	; 0x8c <main+0x20>
  88:	22 0f       	add	r18, r18
  8a:	33 1f       	adc	r19, r19
  8c:	0a 94       	dec	r0
  8e:	e2 f7       	brpl	.-8      	; 0x88 <main+0x1c>
  90:	24 2b       	or	r18, r20
  92:	22 bb       	out	0x12, r18	; 18
			flag--;
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	21 c0       	rjmp	.+66     	; 0xda <main+0x6e>
			}
			else if (flag==4)
  98:	84 30       	cpi	r24, 0x04	; 4
  9a:	91 05       	cpc	r25, r1
  9c:	d9 f4       	brne	.+54     	; 0xd4 <main+0x68>
			{
					SetBit(PORTD,flag);
  9e:	42 b3       	in	r20, 0x12	; 18
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	08 2e       	mov	r0, r24
  a6:	02 c0       	rjmp	.+4      	; 0xac <main+0x40>
  a8:	22 0f       	add	r18, r18
  aa:	33 1f       	adc	r19, r19
  ac:	0a 94       	dec	r0
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <main+0x3c>
  b0:	34 2f       	mov	r19, r20
  b2:	32 2b       	or	r19, r18
  b4:	32 bb       	out	0x12, r19	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	4f ef       	ldi	r20, 0xFF	; 255
  b8:	59 e6       	ldi	r21, 0x69	; 105
  ba:	68 e1       	ldi	r22, 0x18	; 24
  bc:	41 50       	subi	r20, 0x01	; 1
  be:	50 40       	sbci	r21, 0x00	; 0
  c0:	60 40       	sbci	r22, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x50>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x5a>
  c6:	00 00       	nop
					_delay_ms(1000);
					ClearBit(PORTD,flag);
  c8:	32 b3       	in	r19, 0x12	; 18
  ca:	20 95       	com	r18
  cc:	23 23       	and	r18, r19
  ce:	22 bb       	out	0x12, r18	; 18
					flag--;
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	03 c0       	rjmp	.+6      	; 0xda <main+0x6e>
			}
			else
			{
				PORTD=0;
  d4:	12 ba       	out	0x12, r1	; 18
				flag=7;
  d6:	87 e0       	ldi	r24, 0x07	; 7
  d8:	90 e0       	ldi	r25, 0x00	; 0
			}
				while( ReadBit(PIND,0) == 1 );
  da:	80 99       	sbic	0x10, 0	; 16
  dc:	fe cf       	rjmp	.-4      	; 0xda <main+0x6e>
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	30 e7       	ldi	r19, 0x70	; 112
  e2:	42 e0       	ldi	r20, 0x02	; 2
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	30 40       	sbci	r19, 0x00	; 0
  e8:	40 40       	sbci	r20, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x78>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x82>
  ee:	00 00       	nop
  f0:	c1 cf       	rjmp	.-126    	; 0x74 <main+0x8>

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
